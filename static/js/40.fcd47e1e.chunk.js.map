{"version":3,"sources":["state/info/types.ts","views/Info/utils/infoDataHelpers.ts","state/info/queries/protocol/overview.ts","state/info/queries/helpers.ts","views/Info/components/InfoCharts/ChartCard/index.tsx","state/info/queries/protocol/chart.ts","state/info/queries/protocol/transactions.ts","state/info/queries/pools/topPools.ts","state/info/queries/pools/poolData.ts","views/Info/hooks/useBnbPrices.ts","state/info/queries/tokens/tokenData.ts","state/info/queries/tokens/topTokens.ts","state/info/queries/pools/chartData.ts","state/info/queries/pools/transactions.ts","state/info/queries/tokens/chartData.ts","state/info/queries/tokens/transactions.ts","state/info/queries/tokens/priceData.ts","state/info/queries/tokens/poolsForToken.ts","state/info/hooks.ts","state/info/updaters.ts","state/info/queries/search/index.ts","views/Info/components/CurrencyLogo/LogoLoader.tsx","views/Info/components/CurrencyLogo/index.tsx","views/Info/components/SaveIcon/index.tsx","views/Info/components/InfoSearch/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/Percent/index.tsx","views/Info/components/InfoTables/shared.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","views/Info/components/InfoTables/TransactionsTable.tsx","views/Info/Overview/index.tsx","views/Info/Pools/index.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx","components/TabToggle/index.tsx"],"names":["TransactionType","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","totalFees24h","TOTAL_FEE","totalFees7d","lpFees24h","LP_HOLDERS_FEE","lpFees7d","lpApr7d","WEEKS_IN_YEAR","Infinity","getOverviewData","block","a","query","gql","request","INFO_CLIENT","data","error","console","formatPancakeFactoryResponse","rawPancakeFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","useState","fetchState","setFetchState","getDeltaTimestamps","t24","t48","useBlocksFromTimestamps","blocks","blockError","block24","block48","useEffect","fetch","number","undefined","error24","data24","error48","data48","anyError","overviewData","pancakeFactories","overviewData24","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","ChartView","mapMints","mint","type","MINT","hash","id","split","timestamp","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","dailyVolumeUSD","mapPairDayData","pairDayData","reserveUSD","fetchChartData","getEntityDayDatas","address","chartEntries","skip","allFound","fetchError","length","concat","formattedDayDatas","reduce","accum","dayData","dayOrdinal","parseInt","ONE_DAY_UNIX","toFixed","availableDays","Object","keys","map","firstAvailableDayData","PCS_V2_START","latestLiquidityUSD","endTimestamp","getUnixTime","Date","includes","toString","values","PANCAKE_DAY_DATAS","getOverviewChartData","startTime","pancakeDayDatas","useFetchGlobalChartData","overviewChartData","setOverviewChartData","setError","GLOBAL_TRANSACTIONS","fetchTopTransactions","mints","burns","swaps","sort","b","fetchTopPools","timestamp24hAgo","blacklist","TOKEN_BLACKLIST","pairDayDatas","p","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresses","addresses","POOL_AT_BLOCK","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","parsePoolData","pairs","poolData","reserve0","reserve1","token0Price","token1Price","usePoolDatas","t24h","t48h","t7d","t14d","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","name","allBlocksAvailable","BNB_PRICES","fetchBnbPrices","blockWeek","bnbPrices","bnbPrice","twoDay","oneWeek","TOKEN_AT_BLOCK","tokens","fetchTokenData","tokenAddresses","parseTokenData","tokenData","derivedBNB","derivedUSD","tradeVolumeUSD","totalLiquidity","useFetchedTokenDatas","prices","setPrices","tWeek","useBnbPrices","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","tokenDayDatas","t","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","getPoolChartData","fetchPoolChartData","POOL_TRANSACTIONS","fetchPoolTransactions","getTokenChartData","fetchTokenChartData","TOKEN_TRANSACTIONS","fetchTokenTransactions","mints0","mintsAs0","mints1","mintsAs1","burns0","burnsAs0","burns1","burnsAs1","swaps0","swapsAs0","swaps1","swapsAs1","getPriceSubqueries","tokenAddress","priceQueryConstructor","subqueries","fetchTokenPriceData","interval","startTimestamp","timestamps","time","push","getBlocksFromTimestamps","multiQuery","tokenPrices","forEach","priceKey","tokenPriceIndex","findIndex","tokenPrice","formattedHistory","i","open","close","high","low","POOLS_FOR_TOKEN","fetchPoolsForToken","asToken0","asToken1","useProtocolData","useSelector","state","info","protocol","overview","dispatch","useDispatch","useCallback","updateProtocolData","useProtocolChartData","chartData","updateProtocolChartData","useProtocolTransactions","transactions","transactionsData","updateProtocolTransactions","useAllPoolData","byAddress","useAddPoolKeys","addPoolKeys","allPoolData","addNewPoolKeys","untrackedAddresses","filter","pool","useAllTokenData","useAddTokenKeys","addTokenKeys","useTokenDatas","allTokenData","addNewTokenKeys","useMemo","token","ProtocolUpdater","setProtocolData","fetchedProtocolData","updateChartData","fetchedChartData","chartError","updateTransactions","PoolUpdater","updatePoolData","useUpdatePoolData","unfetchedPoolAddresses","poolDataError","poolDatas","TokenUpdater","updateTokenDatas","updateTokenData","useUpdateTokenData","unfetchedTokenAddresses","key","tokenDataError","tokenDatas","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","Set","useFetchSearchResults","searchString","loading","searchResults","setSearchResults","searchStringTooShort","MINIMUM_SEARCH_CHARACTERS","toUpperCase","charAt","slice","toLowerCase","tokenIds","asAddress","asSymbol","asName","as0","as1","search","tokenDatasFull","poolDatasFull","tokensLoading","poolsLoading","BAD_SRCS","LogoLoader","src","alt","rest","refresh","srcFailedLoading","onError","StyledLogo","styled","size","theme","colors","background","text","CurrencyLogo","checksummedAddress","isAddress","DoubleCurrencyWrapper","div","DoubleCurrencyLogo","address0","address1","HoverIcon","SaveIcon","fill","useTheme","stroke","warning","color","textDisabled","Container","StyledInput","Input","inputSecondary","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","Break","cardBorder","HoverText","HoverRowLink","OptionButton","enabled","primary","card","tokenIncludesSearchTerm","value","Search","history","useHistory","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","showMenu","setShowMenu","setValue","debouncedSearchTerm","useDebounce","tokensShown","setTokensShown","poolsShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","showWatchlist","setShowWatchlist","tokensForList","t0","t1","poolForList","poolIncludesSearchTerm","p0","p1","onChange","placeholder","ref","onFocus","mb","onClick","bold","textAlign","fontSize","ml","marginLeft","stopPropagation","formatAmount","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","contentUnderTokenList","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","Flex","gradients","cardHeader","InfoNav","activeIndex","useRouteMatch","scale","variant","as","Link","width","HoverUpdater","locale","payload","setHoverValue","setHoverDate","toLocaleString","year","day","month","LineChart","currentLanguage","ResponsiveContainer","AreaChart","height","margin","top","right","left","bottom","onMouseLeave","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","axisLine","tickLine","tickFormatter","toLocaleDateString","minTickGap","YAxis","tickCount","val","orientation","tick","dx","textSubtle","Tooltip","cursor","contentStyle","display","formatter","tooltipValue","props","Area","strokeWidth","Percent","Number","isNaN","isNegative","Math","abs","ClickableColumnHeader","Text","TableWrapper","radii","PageButtons","Arrow","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","DataRow","index","alignItems","fontWeight","notation","SORT_FIELD","TokenTable","maxItems","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","floor","sortedTokens","handleSort","newField","arrow","field","textTransform","Fragment","LoadingRow","PoolTable","ITEMS_PER_INFO_TABLE_PAGE","sortedPools","CustomBar","x","y","rx","Chart","BarChart","backgroundDisabled","Bar","shape","Wrapper","RadioGroup","transaction","abs0","abs1","outputTokenSymbol","inputTokenSymbol","href","getBscScanLink","truncateHash","formatDistanceToNowStrict","TransactionTable","txFilter","setTxFilter","sortedTransactions","toBeAbsList","firstField","secondField","filteredTransactions","tx","handleFilter","newFilter","flexDirection","checked","justifyContent","ChartCardsContainer","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","currentDate","formattedLiquidityData","fromUnixTime","formattedVolumeData","allTokens","formattedTokens","somePoolsAreLoading","some","Page","mt","PoolsOverview","watchlistPools","px","py","CandleChart","setLabel","chartRef","chartCreated","setChart","handleResize","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","format","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","hour","minute","timeZone","seriesPrices","get","ChartCard","tokenPriceData","VOLUME","view","setView","hoverValue","hoverDate","formattedTvlData","TabToggle","isActive","LIQUIDITY","PRICE","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","PoolPage","routeAddress","match","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","updatePoolChartData","poolAddress","usePoolChartData","updatePoolTransactions","usePoolTransactions","addPoolToWatchlist","mr","displayThreshold","tokenPrecision","flex","onItemClick","totalFees","CardWrapper","TopMoverCard","Box","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","my","TokensOverview","watchListTokens","useCMCLink","cmcPageUrl","setCMCPageUrl","result","status","json","then","url","fetchLink","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","addTokenPoolAddresses","usePoolsForToken","updateTokenTransactions","useTokenTransactions","updateTokenChartData","useTokenChartData","priceData","timeWindow","oldestTimestampFetched","oldestFetchedTimestamp","utcCurrentTime","startOfHour","sub","fetchingError","updateTokenPriceData","secondsInterval","useTokenPriceData","ONE_HOUR_SECONDS","adjustedPriceData","getTime","watchlistTokens","addWatchlistToken","rel","isInteger","RedirectInvalidToken","Info","path","exact","Pools","Tokens","component","Inner","input","button","TabToggleGroup","children"],"mappings":"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","file":"static/js/40.fcd47e1e.chunk.js","sourcesContent":["export interface Block {\n  number: number\n  timestamp: string\n}\n\nexport interface ChartEntry {\n  date: number\n  volumeUSD: number\n  liquidityUSD: number\n}\n\n/**\n * Formatted type for Candlestick charts\n */\nexport interface PriceChartEntry {\n  time: number\n  open: number\n  close: number\n  high: number\n  low: number\n}\n\nexport enum TransactionType {\n  SWAP,\n  MINT,\n  BURN,\n}\n\nexport type Transaction = {\n  type: TransactionType\n  hash: string\n  timestamp: string\n  sender: string\n  token0Symbol: string\n  token1Symbol: string\n  token0Address: string\n  token1Address: string\n  amountUSD: number\n  amountToken0: number\n  amountToken1: number\n}\n\nexport interface ProtocolData {\n  volumeUSD: number\n  volumeUSDChange: number // in 24h, as percentage\n\n  liquidityUSD: number\n  liquidityUSDChange: number // in 24h, as percentage\n\n  txCount: number\n  txCountChange: number\n}\n\nexport interface ProtocolState {\n  readonly overview?: ProtocolData\n\n  readonly chartData?: ChartEntry[]\n\n  readonly transactions?: Transaction[]\n}\n\n// POOLS\n\nexport interface PoolData {\n  address: string\n\n  token0: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  token1: {\n    name: string\n    symbol: string\n    address: string\n  }\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  volumeUSDChangeWeek: number\n\n  totalFees24h: number\n  totalFees7d: number\n  lpFees24h: number\n  lpFees7d: number\n  lpApr7d: number\n\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  token0Price: number\n  token1Price: number\n\n  liquidityToken0: number\n  liquidityToken1: number\n}\n\nexport interface PoolsState {\n  byAddress: {\n    [address: string]: {\n      data?: PoolData\n      chartData?: ChartEntry[]\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// TOKENS\n\nexport type TokenData = {\n  exists: boolean\n\n  name: string\n  symbol: string\n  address: string\n\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n  txCount: number\n\n  liquidityToken: number\n  liquidityUSD: number\n  liquidityUSDChange: number\n\n  priceUSD: number\n  priceUSDChange: number\n  priceUSDChangeWeek: number\n}\n\nexport interface TokensState {\n  byAddress: {\n    [address: string]: {\n      data?: TokenData\n      poolAddresses?: string[]\n      chartData?: ChartEntry[]\n      priceData: {\n        oldestFetchedTimestamp?: number\n        [secondsInterval: number]: PriceChartEntry[] | undefined\n      }\n      transactions?: Transaction[]\n    }\n  }\n}\n\n// Info redux state\nexport interface InfoState {\n  protocol: ProtocolState\n  pools: PoolsState\n  tokens: TokensState\n}\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { ProtocolData } from 'state/info/types'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\n\ninterface PancakeFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  pancakeFactories: PancakeFactory[]\n}\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  try {\n    const query = gql`query overview {\n      pancakeFactories(\n        ${block ? `block: { number: ${block}}` : ``} \n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatPancakeFactoryResponse = (rawPancakeFactory?: PancakeFactory) => {\n  if (rawPancakeFactory) {\n    return {\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await getOverviewData()\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\n      const anyError = error || error24 || error48\n      const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\n      const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\n      const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch()\n    }\n  }, [block24, block48, blockError, fetchState])\n\n  return fetchState\n}\n\nexport default useFetchProtocolData\n","import { ONE_DAY_UNIX, PCS_V2_START } from 'config/constants/info'\nimport { getUnixTime } from 'date-fns'\nimport { TransactionType } from 'state/info/types'\nimport { ChartEntry } from '../types'\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, PancakeDayData } from './types'\n\nexport const mapMints = (mint: MintResponse) => {\n  return {\n    type: TransactionType.MINT,\n    hash: mint.id.split('-')[0],\n    timestamp: mint.timestamp,\n    sender: mint.to,\n    token0Symbol: mint.pair.token0.symbol,\n    token1Symbol: mint.pair.token1.symbol,\n    token0Address: mint.pair.token0.id,\n    token1Address: mint.pair.token1.id,\n    amountUSD: parseFloat(mint.amountUSD),\n    amountToken0: parseFloat(mint.amount0),\n    amountToken1: parseFloat(mint.amount1),\n  }\n}\n\nexport const mapBurns = (burn: BurnResponse) => {\n  return {\n    type: TransactionType.BURN,\n    hash: burn.id.split('-')[0],\n    timestamp: burn.timestamp,\n    sender: burn.sender,\n    token0Symbol: burn.pair.token0.symbol,\n    token1Symbol: burn.pair.token1.symbol,\n    token0Address: burn.pair.token0.id,\n    token1Address: burn.pair.token1.id,\n    amountUSD: parseFloat(burn.amountUSD),\n    amountToken0: parseFloat(burn.amount0),\n    amountToken1: parseFloat(burn.amount1),\n  }\n}\n\nexport const mapSwaps = (swap: SwapResponse) => {\n  return {\n    type: TransactionType.SWAP,\n    hash: swap.id.split('-')[0],\n    timestamp: swap.timestamp,\n    sender: swap.from,\n    token0Symbol: swap.pair.token0.symbol,\n    token1Symbol: swap.pair.token1.symbol,\n    token0Address: swap.pair.token0.id,\n    token1Address: swap.pair.token1.id,\n    amountUSD: parseFloat(swap.amountUSD),\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\n  }\n}\n\nexport const mapDayData = (tokenDayData: TokenDayData | PancakeDayData): ChartEntry => ({\n  date: tokenDayData.date,\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\n})\n\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\n  date: pairDayData.date,\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\n})\n\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport const fetchChartData = async (\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\n  address?: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\n    skip += 1000\n    allFound = data.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\n    // At this stage we track unix day ordinal for each data point to check for empty days later\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n    return {\n      [dayOrdinal]: dayData,\n      ...accum,\n    }\n  }, {})\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? PCS_V2_START\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n","import React, { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { fromUnixTime } from 'date-fns'\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\n  const [view, setView] = useState(ChartView.VOLUME)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\n      valueToDisplay = formatAmount(tokenData.priceUSD)\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n        {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n","/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { ChartEntry } from 'state/info/types'\nimport { PancakeDayDatasResponse } from '../types'\nimport { fetchChartData, mapDayData } from '../helpers'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pancakeDayDatas } = await request<PancakeDayDatasResponse>(INFO_CLIENT, PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = pancakeDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresses(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n","/* eslint-disable no-param-reassign */\nimport { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { PoolData } from 'state/info/types'\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\ninterface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveBNB\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nconst fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\nconst parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default usePoolDatas\n","import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nexport interface BnbPrices {\n  current: number\n  oneDay: number\n  twoDay: number\n  week: number\n}\n\nconst BNB_PRICES = gql`\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\n    current: bundle(id: \"1\") {\n      bnbPrice\n    }\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\n      bnbPrice\n    }\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\n      bnbPrice\n    }\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\n      bnbPrice\n    }\n  }\n`\n\ninterface PricesResponse {\n  current: {\n    bnbPrice: string\n  }\n  oneDay: {\n    bnbPrice: string\n  }\n  twoDay: {\n    bnbPrice: string\n  }\n  oneWeek: {\n    bnbPrice: string\n  }\n}\n\nconst fetchBnbPrices = async (\n  block24: number,\n  block48: number,\n  blockWeek: number,\n): Promise<{ bnbPrices: BnbPrices | undefined; error: boolean }> => {\n  try {\n    const data = await request<PricesResponse>(INFO_CLIENT, BNB_PRICES, {\n      block24,\n      block48,\n      blockWeek,\n    })\n    return {\n      error: false,\n      bnbPrices: {\n        current: parseFloat(data.current?.bnbPrice ?? '0'),\n        oneDay: parseFloat(data.oneDay?.bnbPrice ?? '0'),\n        twoDay: parseFloat(data.twoDay?.bnbPrice ?? '0'),\n        week: parseFloat(data.oneWeek?.bnbPrice ?? '0'),\n      },\n    }\n  } catch (error) {\n    console.error('Failed to fetch BNB prices', error)\n    return {\n      error: true,\n      bnbPrices: undefined,\n    }\n  }\n}\n\n/**\n * Returns BNB prices at current, 24h, 48h, and 7d intervals\n */\nexport const useBnbPrices = (): BnbPrices | undefined => {\n  const [prices, setPrices] = useState<BnbPrices | undefined>()\n  const [error, setError] = useState(false)\n\n  const [t24, t48, tWeek] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const [block24, block48, blockWeek] = blocks\n      const { bnbPrices, error: fetchError } = await fetchBnbPrices(block24.number, block48.number, blockWeek.number)\n      if (fetchError) {\n        setError(true)\n      } else {\n        setPrices(bnbPrices)\n      }\n    }\n    if (!prices && !error && blocks && !blockError) {\n      fetch()\n    }\n  }, [error, prices, blocks, blockError])\n\n  return prices\n}\n","/* eslint-disable no-param-reassign */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\nimport { TokenData } from 'state/info/types'\nimport { useBnbPrices } from 'views/Info/hooks/useBnbPrices'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedBNB: string // Price in BNB per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<TokenFields, 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\n  derivedBNB: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedBNB\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedBNB: parseFloat(derivedBNB),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n  const bnbPrices = useBnbPrices()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedBNB * bnbPrices.current : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedBNB * bnbPrices.oneDay : 0\n          const priceUSDWeek = week ? week.derivedBNB * bnbPrices.week : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && bnbPrices) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, bnbPrices])\n\n  return fetchState\n}\n\nexport default useFetchedTokenDatas\n","import { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo)\n      setTopTokenAddresses(addresses)\n    }\n    if (topTokenAddresses.length === 0) {\n      fetch()\n    }\n  }, [topTokenAddresses, timestamp24hAgo])\n\n  return topTokenAddresses\n}\n\nexport default useTopTokenAddresses\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { PairDayDatasResponse } from '../types'\nimport { mapPairDayData, fetchChartData } from '../helpers'\n\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        pairDayDatas(\n          first: 1000\n          skip: $skip\n          where: { pairAddress: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          reserveUSD\n        }\n      }\n    `\n    const { pairDayDatas } = await request<PairDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = pairDayDatas.map(mapPairDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getPoolChartData, address)\n}\n\nexport default fetchPoolChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\n      address,\n    })\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { TokenDayDatasResponse } from '../types'\nimport { mapDayData, fetchChartData } from '../helpers'\n\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Data to display transaction table on Token page\n */\nconst TOKEN_TRANSACTIONS = gql`\n  query tokenTransactions($address: Bytes!) {\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mintsAs0: MintResponse[]\n  mintsAs1: MintResponse[]\n  swapsAs0: SwapResponse[]\n  swapsAs1: SwapResponse[]\n  burnsAs0: BurnResponse[]\n  burnsAs1: BurnResponse[]\n}\n\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, TOKEN_TRANSACTIONS, {\n      address,\n    })\n    const mints0 = data.mintsAs0.map(mapMints)\n    const mints1 = data.mintsAs1.map(mapMints)\n\n    const burns0 = data.burnsAs0.map(mapBurns)\n    const burns1 = data.burnsAs1.map(mapBurns)\n\n    const swaps0 = data.swapsAs0.map(mapSwaps)\n    const swaps1 = data.swapsAs1.map(mapSwaps)\n\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenTransactions\n","import { getUnixTime } from 'date-fns'\nimport { gql } from 'graphql-request'\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { PriceChartEntry } from 'state/info/types'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nconst getPriceSubqueries = (tokenAddress: string, blocks: any) =>\n  blocks.map(\n    (block: any) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedBNB\n      }\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        bnbPrice\n      }\n    `,\n  )\n\n/**\n * Price data for token and bnb based on block number\n */\nconst priceQueryConstructor = (subqueries: string[]) => {\n  return gql`\n    query tokenPriceData {\n      ${subqueries}\n    }\n  `\n}\n\nconst fetchTokenPriceData = async (\n  address: string,\n  interval: number,\n  startTimestamp: number,\n): Promise<{\n  data?: PriceChartEntry[]\n  error: boolean\n}> => {\n  // Construct timestamps to query against\n  const endTimestamp = getUnixTime(new Date())\n  const timestamps = []\n  let time = startTimestamp\n  while (time <= endTimestamp) {\n    timestamps.push(time)\n    time += interval\n  }\n  try {\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\n    if (!blocks || blocks.length === 0) {\n      console.error('Error fetching blocks for timestamps', timestamps)\n      return {\n        error: false,\n      }\n    }\n\n    const prices: any | undefined = await multiQuery(\n      priceQueryConstructor,\n      getPriceSubqueries(address, blocks),\n      INFO_CLIENT,\n      200,\n    )\n\n    if (!prices) {\n      console.error('Price data failed to load')\n      return {\n        error: false,\n      }\n    }\n\n    // format token BNB price results\n    const tokenPrices: {\n      timestamp: string\n      derivedBNB: number\n      priceUSD: number\n    }[] = []\n\n    // Get Token prices in BNB\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('t')[1]\n      // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\n      if (timestamp) {\n        tokenPrices.push({\n          timestamp,\n          derivedBNB: prices[priceKey]?.derivedBNB ? parseFloat(prices[priceKey].derivedBNB) : 0,\n          priceUSD: 0,\n        })\n      }\n    })\n\n    // Go through BNB USD prices and calculate Token price based on it\n    Object.keys(prices).forEach((priceKey) => {\n      const timestamp = priceKey.split('b')[1]\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\n      if (timestamp) {\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\n        if (tokenPriceIndex >= 0) {\n          const { derivedBNB } = tokenPrices[tokenPriceIndex]\n          tokenPrices[tokenPriceIndex].priceUSD = parseFloat(prices[priceKey]?.bnbPrice ?? 0) * derivedBNB\n        }\n      }\n    })\n\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\n    tokenPrices.sort((a, b) => parseInt(a.timestamp, 10) - parseInt(b.timestamp, 10))\n\n    const formattedHistory = []\n\n    // for each timestamp, construct the open and close price\n    for (let i = 0; i < tokenPrices.length - 1; i++) {\n      formattedHistory.push({\n        time: parseFloat(tokenPrices[i].timestamp),\n        open: tokenPrices[i].priceUSD,\n        close: tokenPrices[i + 1].priceUSD,\n        high: tokenPrices[i + 1].priceUSD,\n        low: tokenPrices[i].priceUSD,\n      })\n    }\n\n    return { data: formattedHistory, error: false }\n  } catch (error) {\n    console.error(`Failed to fetch price data for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenPriceData\n","import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n\ninterface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST,\n    })\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n","import { useCallback, useEffect, useState, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUnixTime, startOfHour, Duration, sub } from 'date-fns'\nimport { AppState, AppDispatch } from 'state'\nimport { isAddress } from 'utils'\nimport { Transaction } from 'state/info/types'\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\nimport {\n  updateProtocolData,\n  updateProtocolChartData,\n  updateProtocolTransactions,\n  updatePoolData,\n  addPoolKeys,\n  updatePoolChartData,\n  updatePoolTransactions,\n  updateTokenData,\n  addTokenKeys,\n  addTokenPoolAddresses,\n  updateTokenChartData,\n  updateTokenPriceData,\n  updateTokenTransactions,\n} from './actions'\nimport { ProtocolData, PoolData, TokenData, ChartEntry, PriceChartEntry } from './types'\n\n// Protocol hooks\n\nexport const useProtocolData = (): [ProtocolData | undefined, (protocolData: ProtocolData) => void] => {\n  const protocolData: ProtocolData | undefined = useSelector((state: AppState) => state.info.protocol.overview)\n\n  const dispatch = useDispatch<AppDispatch>()\n  const setProtocolData: (protocolData: ProtocolData) => void = useCallback(\n    (data: ProtocolData) => dispatch(updateProtocolData({ protocolData: data })),\n    [dispatch],\n  )\n\n  return [protocolData, setProtocolData]\n}\n\nexport const useProtocolChartData = (): [ChartEntry[] | undefined, (chartData: ChartEntry[]) => void] => {\n  const chartData: ChartEntry[] | undefined = useSelector((state: AppState) => state.info.protocol.chartData)\n  const dispatch = useDispatch<AppDispatch>()\n  const setChartData: (chartData: ChartEntry[]) => void = useCallback(\n    (data: ChartEntry[]) => dispatch(updateProtocolChartData({ chartData: data })),\n    [dispatch],\n  )\n  return [chartData, setChartData]\n}\n\nexport const useProtocolTransactions = (): [Transaction[] | undefined, (transactions: Transaction[]) => void] => {\n  const transactions: Transaction[] | undefined = useSelector((state: AppState) => state.info.protocol.transactions)\n  const dispatch = useDispatch<AppDispatch>()\n  const setTransactions: (transactions: Transaction[]) => void = useCallback(\n    (transactionsData: Transaction[]) => dispatch(updateProtocolTransactions({ transactions: transactionsData })),\n    [dispatch],\n  )\n  return [transactions, setTransactions]\n}\n\n// Pools hooks\n\nexport const useAllPoolData = (): {\n  [address: string]: { data?: PoolData }\n} => {\n  return useSelector((state: AppState) => state.info.pools.byAddress)\n}\n\nexport const useUpdatePoolData = (): ((pools: PoolData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools })), [dispatch])\n}\n\nexport const useAddPoolKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses })), [dispatch])\n}\n\nexport const usePoolDatas = (poolAddresses: string[]): PoolData[] => {\n  const allPoolData = useAllPoolData()\n  const addNewPoolKeys = useAddPoolKeys()\n\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address)\n    }\n    return accum\n  }, [])\n\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addNewPoolKeys(untrackedAddresses)\n    }\n  }, [addNewPoolKeys, untrackedAddresses])\n\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      return allPoolData[address]?.data\n    })\n    .filter((pool) => pool)\n\n  return poolsWithData\n}\n\nexport const usePoolChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const chartData = pool?.chartData\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolChartData(address)\n      if (!fetchError && data) {\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const usePoolTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\n  const transactions = pool?.transactions\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchPoolTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else {\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n\n// Tokens hooks\n\nexport const useAllTokenData = (): {\n  [address: string]: { data?: TokenData }\n} => {\n  return useSelector((state: AppState) => state.info.tokens.byAddress)\n}\n\nexport const useUpdateTokenData = (): ((tokens: TokenData[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(\n    (tokens: TokenData[]) => {\n      dispatch(updateTokenData({ tokens }))\n    },\n    [dispatch],\n  )\n}\n\nexport const useAddTokenKeys = (): ((addresses: string[]) => void) => {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback((tokenAddresses: string[]) => dispatch(addTokenKeys({ tokenAddresses })), [dispatch])\n}\n\nexport const useTokenDatas = (addresses?: string[]): TokenData[] | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  // if token not tracked yet track it\n  addresses?.forEach((a) => {\n    if (!allTokenData[a]) {\n      addNewTokenKeys([a])\n    }\n  })\n\n  const tokensWithData = useMemo(() => {\n    if (!addresses) {\n      return undefined\n    }\n    return addresses\n      .map((a) => {\n        return allTokenData[a]?.data\n      })\n      .filter((token) => token)\n  }, [addresses, allTokenData])\n\n  return tokensWithData\n}\n\nexport const useTokenData = (address: string | undefined): TokenData | undefined => {\n  const allTokenData = useAllTokenData()\n  const addNewTokenKeys = useAddTokenKeys()\n\n  if (!address || !isAddress(address)) {\n    return undefined\n  }\n\n  // if token not tracked yet track it\n  if (!allTokenData[address]) {\n    addNewTokenKeys([address])\n  }\n\n  return allTokenData[address]?.data\n}\n\nexport const usePoolsForToken = (address: string): string[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const poolsForToken = token.poolAddresses\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, addresses } = await fetchPoolsForToken(address)\n      if (!fetchError && addresses) {\n        dispatch(addTokenPoolAddresses({ tokenAddress: address, poolAddresses: addresses }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!poolsForToken && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, poolsForToken])\n\n  return poolsForToken\n}\n\nexport const useTokenChartData = (address: string): ChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { chartData } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenChartData(address)\n      if (!fetchError && data) {\n        dispatch(updateTokenChartData({ tokenAddress: address, chartData: data }))\n      }\n      if (fetchError) {\n        setError(fetchError)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData])\n\n  return chartData\n}\n\nexport const useTokenPriceData = (\n  address: string,\n  interval: number,\n  timeWindow: Duration,\n): PriceChartEntry[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const priceData = token?.priceData[interval]\n  const [error, setError] = useState(false)\n\n  // construct timestamps and check if we need to fetch more data\n  const oldestTimestampFetched = token?.priceData.oldestFetchedTimestamp\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data, error: fetchingError } = await fetchTokenPriceData(address, interval, startTimestamp)\n      if (data) {\n        dispatch(\n          updateTokenPriceData({\n            tokenAddress: address,\n            secondsInterval: interval,\n            priceData: data,\n            oldestFetchedTimestamp: startTimestamp,\n          }),\n        )\n      }\n      if (fetchingError) {\n        setError(true)\n      }\n    }\n    if (!priceData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, interval, oldestTimestampFetched, priceData, startTimestamp, timeWindow])\n\n  return priceData\n}\n\nexport const useTokenTransactions = (address: string): Transaction[] | undefined => {\n  const dispatch = useDispatch<AppDispatch>()\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\n  const { transactions } = token\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error: fetchError, data } = await fetchTokenTransactions(address)\n      if (fetchError) {\n        setError(true)\n      } else if (data) {\n        dispatch(updateTokenTransactions({ tokenAddress: address, transactions: data }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions])\n\n  return transactions\n}\n","import React, { useEffect, useMemo } from 'react'\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\nimport usePoolDatas from 'state/info/queries/pools/poolData'\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\nimport {\n  useProtocolData,\n  useProtocolChartData,\n  useProtocolTransactions,\n  useUpdatePoolData,\n  useAllPoolData,\n  useAddPoolKeys,\n  useAllTokenData,\n  useUpdateTokenData,\n  useAddTokenKeys,\n} from './hooks'\n\nexport const ProtocolUpdater: React.FC = () => {\n  const [protocolData, setProtocolData] = useProtocolData()\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\n\n  const [chartData, updateChartData] = useProtocolChartData()\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\n\n  const [transactions, updateTransactions] = useProtocolTransactions()\n\n  // update overview data if available and not set\n  useEffect(() => {\n    if (protocolData === undefined && fetchedProtocolData && !error) {\n      setProtocolData(fetchedProtocolData)\n    }\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\n\n  // update global chart data if available and not set\n  useEffect(() => {\n    if (chartData === undefined && fetchedChartData && !chartError) {\n      updateChartData(fetchedChartData)\n    }\n  }, [chartData, chartError, fetchedChartData, updateChartData])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchTopTransactions()\n      if (data) {\n        updateTransactions(data)\n      }\n    }\n    if (!transactions) {\n      fetch()\n    }\n  }, [transactions, updateTransactions])\n\n  return null\n}\n\nexport const PoolUpdater: React.FC = () => {\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const allPoolData = useAllPoolData()\n  const addresses = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\n      const poolData = allPoolData[address]\n      if (!poolData.data) {\n        accum.push(address)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // fetch data for unfetched pools and update them\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n  useEffect(() => {\n    if (poolDatas && !poolDataError) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDatas, updatePoolData])\n\n  return null\n}\n\nexport const TokenUpdater = (): null => {\n  const updateTokenDatas = useUpdateTokenData()\n  const addTokenKeys = useAddTokenKeys()\n\n  const allTokenData = useAllTokenData()\n  const addresses = useTopTokenAddresses()\n\n  // add top tokens on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addTokenKeys(addresses)\n    }\n  }, [addTokenKeys, addresses])\n\n  // detect for which addresses we havent loaded token data yet\n  const unfetchedTokenAddresses = useMemo(() => {\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\n      const tokenData = allTokenData[key]\n      if (!tokenData.data) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allTokenData])\n\n  // fetch data for unfetched tokens and update them\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\n  useEffect(() => {\n    if (tokenDatas && !tokenDataError) {\n      updateTokenDatas(Object.values(tokenDatas))\n    }\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\n\n  return null\n}\n","import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { useTokenDatas, usePoolDatas } from 'state/info/hooks'\nimport { TokenData, PoolData } from 'state/info/types'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\n\nconst TOKEN_SEARCH = gql`\n  query tokens($symbol: String, $name: String, $id: String) {\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      id\n    }\n  }\n`\n\nconst POOL_SEARCH = gql`\n  query pools($tokens: [Bytes]!, $id: String) {\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\n      id\n    }\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\n      id\n    }\n    asAddress: pairs(first: 1, where: { id: $id }) {\n      id\n    }\n  }\n`\n\ninterface SingleQueryResponse {\n  id: string[]\n}\n\ninterface TokenSearchResponse {\n  asSymbol: SingleQueryResponse[]\n  asName: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\ninterface PoolSearchResponse {\n  as0: SingleQueryResponse[]\n  as1: SingleQueryResponse[]\n  asAddress: SingleQueryResponse[]\n}\n\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\n  const ids = entityArrays\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\n    .map((entity) => entity.id)\n  return Array.from(new Set(ids))\n}\n\nconst useFetchSearchResults = (\n  searchString: string,\n): {\n  tokens: TokenData[]\n  pools: PoolData[]\n  tokensLoading: boolean\n  poolsLoading: boolean\n  error: boolean\n} => {\n  const [searchResults, setSearchResults] = useState({\n    tokens: [], // Token ids found by search query\n    pools: [], // Pool ids found by search query\n    loading: false, // Search query is in progress\n    error: false, // GraphQL returned error\n  })\n\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\n\n  // New value received, reset state\n  useEffect(() => {\n    setSearchResults({\n      tokens: [],\n      pools: [],\n      loading: !searchStringTooShort,\n      error: false,\n    })\n  }, [searchString, searchStringTooShort])\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        const tokens = await request<TokenSearchResponse>(INFO_CLIENT, TOKEN_SEARCH, {\n          symbol: searchString.toUpperCase(),\n          // Most well known tokens have first letter capitalized\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\n          id: searchString.toLowerCase(),\n        })\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\n        const pools = await request<PoolSearchResponse>(INFO_CLIENT, POOL_SEARCH, {\n          tokens: tokenIds,\n          id: searchString.toLowerCase(),\n        })\n        setSearchResults({\n          tokens: tokenIds,\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\n          loading: false,\n          error: false,\n        })\n      } catch (error) {\n        console.error(`Search failed for ${searchString}`, error)\n        setSearchResults({\n          tokens: [],\n          pools: [],\n          loading: false,\n          error: true,\n        })\n      }\n    }\n    if (!searchStringTooShort) {\n      search()\n    }\n  }, [searchString, searchStringTooShort])\n\n  // Save ids to Redux\n  // Token and Pool updater will then go fetch full data for these addresses\n  // These hooks in turn will return data of tokens that have been fetched\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\n  const poolDatasFull = usePoolDatas(searchResults.pools)\n\n  // If above hooks returned not all tokens/pools it means\n  // that some requests for full data are in progress\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\n\n  return {\n    tokens: tokenDatasFull,\n    pools: poolDatasFull,\n    tokensLoading,\n    poolsLoading,\n    error: searchResults.error,\n  }\n}\n\nexport default useFetchSearchResults\n","import React, { useState } from 'react'\nimport { HelpIcon } from '@pancakeswap/uikit'\n\nconst BAD_SRCS: string[] = []\n\nexport interface LogoLoaderProps {\n  alt: string\n  src: string\n}\n\n/**\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\n */\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\n  const [, refresh] = useState(0)\n\n  const srcFailedLoading = BAD_SRCS.includes(src)\n\n  if (src && !srcFailedLoading) {\n    return (\n      <img\n        {...rest}\n        alt={alt}\n        src={src}\n        onError={() => {\n          if (src) BAD_SRCS.push(src)\n          refresh((i) => i + 1)\n        }}\n      />\n    )\n  }\n\n  return <HelpIcon {...rest} />\n}\n\nexport default LogoLoader\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport LogoLoader from './LogoLoader'\n\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  border-radius: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const CurrencyLogo: React.FC<{\n  address?: string\n  size?: string\n}> = ({ address, size = '24px', ...rest }) => {\n  const src = useMemo(() => {\n    const checksummedAddress = isAddress(address)\n    if (checksummedAddress) {\n      return `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${checksummedAddress}/logo.png`\n    }\n    return null\n  }, [address])\n\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\n}\n\nconst DoubleCurrencyWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 32px;\n`\n\ninterface DoubleCurrencyLogoProps {\n  address0?: string\n  address1?: string\n  size?: number\n}\n\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\n  return (\n    <DoubleCurrencyWrapper>\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\n    </DoubleCurrencyWrapper>\n  )\n}\n","import React, { HTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { StarFillIcon, StarLineIcon } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst HoverIcon = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\n  const { theme } = useTheme()\n  return (\n    <HoverIcon {...rest}>\n      {fill ? (\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\n      ) : (\n        <StarLineIcon stroke={theme.colors.textDisabled} />\n      )}\n    </HoverIcon>\n  )\n}\n\nexport default SaveIcon\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport useFetchSearchResults from 'state/info/queries/search'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { useHistory } from 'react-router-dom'\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useDebounce from 'hooks/useDebounce'\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\nimport { PoolData } from 'state/info/types'\n\nconst Container = styled.div`\n  position: relative;\n  z-index: 30;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  z-index: 9999;\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst Menu = styled.div<{ hide: boolean }>`\n  display: ${({ hide }) => (hide ? 'none' : 'flex')};\n  flex-direction: column;\n  z-index: 9999;\n  width: 100%;\n  top: 50px;\n  max-height: 400px;\n  overflow: auto;\n  right: 0;\n  padding: 1.5rem;\n  padding-bottom: 2.5rem;\n  position: absolute;\n  background: ${({ theme }) => theme.colors.background};\n  border-radius: 8px;\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\n    0px 24px 32px rgba(0, 0, 0, 0.04);\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\n  margin-top: 4px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 0;\n    width: 500px;\n    max-height: 600px;\n  }\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-top: 0;\n    width: 800px;\n    max-height: 600px;\n  }\n`\n\nconst Blackout = styled.div`\n  position: absolute;\n  min-height: 100vh;\n  width: 100vw;\n  z-index: 10;\n  background-color: black;\n  opacity: 0.7;\n  left: 0;\n  top: 0;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: 1fr;\n  margin: 8px 0;\n  align-items: center;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: 1.5fr repeat(3, 1fr);\n  }\n`\n\nconst Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n  margin: 16px 0;\n`\n\nconst HoverText = styled.div<{ hide: boolean }>`\n  color: ${({ theme }) => theme.colors.secondary};\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\n  margin-top: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst HoverRowLink = styled.div`\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst OptionButton = styled.div<{ enabled: boolean }>`\n  width: fit-content;\n  padding: 4px 8px;\n  border-radius: 8px;\n  display: flex;\n  font-size: 12px;\n  font-weight: 600;\n  margin-right: 10px;\n  justify-content: center;\n  align-items: center;\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\n  :hover {\n    opacity: 0.6;\n    cursor: pointer;\n  }\n`\ntype BasicTokenData = {\n  address: string\n  symbol: string\n  name: string\n}\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\n  return (\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\n    token.name.toLowerCase().includes(value.toLowerCase())\n  )\n}\n\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\n  return (\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\n    tokenIncludesSearchTerm(pool.token0, value) ||\n    tokenIncludesSearchTerm(pool.token1, value)\n  )\n}\n\nconst Search = () => {\n  const history = useHistory()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const menuRef = useRef<HTMLDivElement>(null)\n  const showMoreRef = useRef<HTMLDivElement>(null)\n\n  const [showMenu, setShowMenu] = useState(false)\n  const [value, setValue] = useState('')\n  const debouncedSearchTerm = useDebounce(value, 600)\n\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\n\n  const [tokensShown, setTokensShown] = useState(3)\n  const [poolsShown, setPoolsShown] = useState(3)\n\n  useEffect(() => {\n    setTokensShown(3)\n    setPoolsShown(3)\n  }, [debouncedSearchTerm])\n\n  const handleOutsideClick = (e: any) => {\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\n\n    if (!menuClick && !inputCLick && !showMoreClick) {\n      setPoolsShown(3)\n      setTokensShown(3)\n      setShowMenu(false)\n    }\n  }\n\n  useEffect(() => {\n    if (showMenu) {\n      document.addEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'hidden'\n    } else {\n      document.removeEventListener('click', handleOutsideClick)\n      document.querySelector('body').style.overflow = 'visible'\n    }\n\n    return () => {\n      document.removeEventListener('click', handleOutsideClick)\n    }\n  }, [showMenu])\n\n  // watchlist\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\n  const [savedPools, addSavedPool] = useWatchlistPools()\n\n  const handleItemClick = (to: string) => {\n    setShowMenu(false)\n    setPoolsShown(3)\n    setTokensShown(3)\n    history.push(to)\n  }\n\n  // get date for watchlist\n  const watchListTokenData = useTokenDatas(savedTokens)\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\n  const watchListPoolData = usePoolDatas(savedPools)\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\n\n  // filter on view\n  const [showWatchlist, setShowWatchlist] = useState(false)\n  const tokensForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\n    }\n    return tokens.sort((t0, t1) => (t0.volumeUSD > t1.volumeUSD ? -1 : 1))\n  }, [showWatchlist, tokens, watchListTokenData, value])\n\n  const poolForList = useMemo(() => {\n    if (showWatchlist) {\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\n    }\n    return pools.sort((p0, p1) => (p0.volumeUSD > p1.volumeUSD ? -1 : 1))\n  }, [pools, showWatchlist, watchListPoolData, value])\n\n  const contentUnderTokenList = () => {\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\n    const noTokensFound =\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noTokensMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  const contentUnderPoolList = () => {\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\n    const noPoolsFound =\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\n    return (\n      <>\n        {isLoading && <Skeleton />}\n        {showMessage && <Text>{noPoolsMessage}</Text>}\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\n          <Text>{t('Search pools or tokens')}</Text>\n        )}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {showMenu ? <Blackout /> : null}\n      <Container>\n        <StyledInput\n          type=\"text\"\n          value={value}\n          onChange={(e) => {\n            setValue(e.target.value)\n          }}\n          placeholder={t('Search pools or tokens')}\n          ref={inputRef}\n          onFocus={() => {\n            setShowMenu(true)\n          }}\n        />\n        <Menu hide={!showMenu} ref={menuRef}>\n          <Flex mb=\"16px\">\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\n              {t('Search')}\n            </OptionButton>\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\n              {t('Watchlist')}\n            </OptionButton>\n          </Flex>\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\n\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\">\n              {t('Tokens')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Price')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <CurrencyLogo address={token.address} />\n                    <Text ml=\"10px\">\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '8px' }}\n                      fill={savedTokens.includes(token.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedToken(token.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderTokenList()}\n          <HoverText\n            onClick={() => {\n              setTokensShown(tokensShown + 5)\n            }}\n            hide={tokensForList.length <= tokensShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n\n          <Break />\n          <ResponsiveGrid>\n            <Text bold color=\"secondary\" mb=\"8px\">\n              {t('Pools')}\n            </Text>\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 24H')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Volume 7D')}\n              </Text>\n            )}\n            {!isXs && !isSm && (\n              <Text textAlign=\"end\" fontSize=\"12px\">\n                {t('Liquidity')}\n              </Text>\n            )}\n          </ResponsiveGrid>\n          {poolForList.slice(0, poolsShown).map((p, i) => {\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <HoverRowLink onClick={() => handleItemClick(`/info/pool/${p.address}`)} key={i}>\n                <ResponsiveGrid>\n                  <Flex>\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\n                    </Text>\n                    <SaveIcon\n                      id=\"watchlist-icon\"\n                      style={{ marginLeft: '10px' }}\n                      fill={savedPools.includes(p.address)}\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        addSavedPool(p.address)\n                      }}\n                    />\n                  </Flex>\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\n                </ResponsiveGrid>\n              </HoverRowLink>\n            )\n          })}\n          {contentUnderPoolList()}\n          <HoverText\n            onClick={() => {\n              setPoolsShown(poolsShown + 5)\n            }}\n            hide={poolForList.length <= poolsShown}\n            ref={showMoreRef}\n          >\n            {t('See more...')}\n          </HoverText>\n        </Menu>\n      </Container>\n    </>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Search from 'views/Info/components/InfoSearch'\n\nconst NavWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\n  justify-content: space-between;\n  padding: 20px 16px;\n  flex-direction: column;\n  gap: 8px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 20px 40px;\n    flex-direction: row;\n  }\n`\n\nconst InfoNav = () => {\n  const { t } = useTranslation()\n  const isPools = useRouteMatch(['/info/pools', '/info/pool', '/info/pair'])\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\n  let activeIndex = 0\n  if (isPools) {\n    activeIndex = 1\n  }\n  if (isTokens) {\n    activeIndex = 2\n  }\n  return (\n    <NavWrapper>\n      <Box>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem as={Link} to=\"/info\">\n            {t('Overview')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/pools\">\n            {t('Pools')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\n            {t('Tokens')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Box>\n      <Box width={['100%', '100%', '250px']}>\n        <Search />\n      </Box>\n    </NavWrapper>\n  )\n}\n\nexport default InfoNav\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        width={300}\n        height={308}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.secondary }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\nexport interface PercentProps extends TextProps {\n  value: number | undefined\n}\n\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\n  if (!value || Number.isNaN(value)) {\n    return <Text {...rest}>-</Text>\n  }\n\n  const isNegative = value < 0\n\n  return (\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\n      {isNegative ? '↓' : '↑'}\n      {Math.abs(value).toFixed(2)}%\n    </Text>\n  )\n}\n\nexport default Percent\n","import styled from 'styled-components'\nimport { Text, Flex } from '@pancakeswap/uikit'\n\nexport const ClickableColumnHeader = styled(Text)`\n  cursor: pointer;\n`\n\nexport const TableWrapper = styled(Flex)`\n  width: 100%;\n  padding-top: 16px;\n  flex-direction: column;\n  gap: 16px;\n  background-color: ${({ theme }) => theme.card.background};\n  border-radius: ${({ theme }) => theme.radii.card};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.2em;\n  margin-bottom: 1.2em;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\nexport const Break = styled.div`\n  height: 1px;\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  width: 100%;\n`\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { TokenData } from 'state/info/types'\nimport { Link } from 'react-router-dom'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\n *  4 = | # | Name | Price |              | Volume 24H |     |\n *  2 = |   | Name |       |              | Volume 24H |     |\n *  On smallest screen Name is reduced to just symbol\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n\n  padding: 0 24px;\n\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\n\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\n    & :nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\n    & :nth-child(6) {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 670px) {\n    grid-template-columns: 1fr 1fr;\n    > *:first-child {\n      display: none;\n    }\n    > *:nth-child(3) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst ResponsiveLogo = styled(CurrencyLogo)`\n  @media screen and (max-width: 670px) {\n    width: 16px;\n    height: 16px;\n  }\n`\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  return (\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\n      <ResponsiveGrid>\n        <Flex>\n          <Text>{index + 1}</Text>\n        </Flex>\n        <Flex alignItems=\"center\">\n          <ResponsiveLogo address={tokenData.address} />\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\n          {!isXs && !isSm && (\n            <Flex marginLeft=\"10px\">\n              <Text>{tokenData.name}</Text>\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\n            </Flex>\n          )}\n        </Flex>\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\n        <Text fontWeight={400}>\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\n        </Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\nconst SORT_FIELD = {\n  name: 'name',\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  priceUSD: 'priceUSD',\n  priceUSDChange: 'priceUSDChange',\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\n}\n\nconst MAX_ITEMS = 10\n\nconst TokenTable: React.FC<{\n  tokenDatas: TokenData[] | undefined\n  maxItems?: number\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (tokenDatas) {\n      if (tokenDatas.length % maxItems === 0) {\n        extraPages = 0\n      }\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\n    }\n  }, [maxItems, tokenDatas])\n\n  const sortedTokens = useMemo(() => {\n    return tokenDatas\n      ? tokenDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(maxItems * (page - 1), page * maxItems)\n      : []\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  if (!tokenDatas) {\n    return <Skeleton />\n  }\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.name)}\n          textTransform=\"uppercase\"\n        >\n          {t('Name')} {arrow(SORT_FIELD.name)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\n          textTransform=\"uppercase\"\n        >\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n\n      <Break />\n      {sortedTokens.length > 0 ? (\n        <>\n          {sortedTokens.map((data, i) => {\n            if (data) {\n              return (\n                <React.Fragment key={data.address}>\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default TokenTable\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { PoolData } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\n/**\n *  Columns on different layouts\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\n *  3 = | # | Pool |     | Volume 24H |           |\n *  2 = |   | Pool |     | Volume 24H |           |\n */\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\n\n  padding: 0 24px;\n  @media screen and (max-width: 900px) {\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\n    & :nth-child(4),\n    & :nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\n    & :nth-child(4),\n    & :nth-child(5),\n    & :nth-child(6),\n    & :nth-child(7) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 480px) {\n    grid-template-columns: 2.5fr repeat(1, 1fr);\n    > *:nth-child(1) {\n      display: none;\n    }\n  }\n`\n\nconst LinkWrapper = styled(Link)`\n  text-decoration: none;\n  :hover {\n    cursor: pointer;\n    opacity: 0.7;\n  }\n`\n\nconst SORT_FIELD = {\n  volumeUSD: 'volumeUSD',\n  liquidityUSD: 'liquidityUSD',\n  volumeUSDWeek: 'volumeUSDWeek',\n  lpFees24h: 'lpFees24h',\n  lpApr7d: 'lpApr7d',\n}\n\nconst LoadingRow: React.FC = () => (\n  <ResponsiveGrid>\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n    <Skeleton />\n  </ResponsiveGrid>\n)\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\n  return (\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\n      <ResponsiveGrid>\n        <Text>{index + 1}</Text>\n        <Flex>\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\n          <Text ml=\"8px\">\n            {poolData.token0.symbol}/{poolData.token1.symbol}\n          </Text>\n        </Flex>\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\n      </ResponsiveGrid>\n    </LinkWrapper>\n  )\n}\n\ninterface PoolTableProps {\n  poolDatas: PoolData[]\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\n}\n\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\n  // for sorting\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n  const { t } = useTranslation()\n\n  // pagination\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n  useEffect(() => {\n    let extraPages = 1\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n      extraPages = 0\n    }\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\n  }, [poolDatas])\n\n  const sortedPools = useMemo(() => {\n    return poolDatas\n      ? poolDatas\n          .sort((a, b) => {\n            if (a && b) {\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\n                ? (sortDirection ? -1 : 1) * 1\n                : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [page, poolDatas, sortDirection, sortField])\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <TableWrapper>\n      <ResponsiveGrid>\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          #\n        </Text>\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Pool')}\n        </Text>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\n          textTransform=\"uppercase\"\n        >\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\n          textTransform=\"uppercase\"\n        >\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\n        </ClickableColumnHeader>\n        <ClickableColumnHeader\n          color=\"secondary\"\n          fontSize=\"12px\"\n          bold\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\n          textTransform=\"uppercase\"\n        >\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\n        </ClickableColumnHeader>\n      </ResponsiveGrid>\n      <Break />\n      {sortedPools.length > 0 ? (\n        <>\n          {sortedPools.map((poolData, i) => {\n            if (poolData) {\n              return (\n                <React.Fragment key={poolData.address}>\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\n                  <Break />\n                </React.Fragment>\n              )\n            }\n            return null\n          })}\n          {loading && <LoadingRow />}\n          <PageButtons>\n            <Arrow\n              onClick={() => {\n                setPage(page === 1 ? page : page - 1)\n              }}\n            >\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n            </Arrow>\n\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n\n            <Arrow\n              onClick={() => {\n                setPage(page === maxPage ? page : page + 1)\n              }}\n            >\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n            </Arrow>\n          </PageButtons>\n        </>\n      ) : (\n        <>\n          <TableLoader />\n          {/* spacer */}\n          <Box />\n        </>\n      )}\n    </TableWrapper>\n  )\n}\n\nexport default PoolTable\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type LineChartProps = {\n  data: any[]\n  height?: string\n  chartHeight?: string\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CustomBar = ({\n  x,\n  y,\n  width,\n  height,\n  fill,\n}: {\n  x: number\n  y: number\n  width: number\n  height: number\n  fill: string\n}) => {\n  return (\n    <g>\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\n    </g>\n  )\n}\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <BarChartLoader />\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          setHoverDate(undefined)\n          setHoverValue(undefined)\n        }}\n      >\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ fill: theme.colors.backgroundDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Bar\n          dataKey=\"value\"\n          fill={theme.colors.primary}\n          shape={(props) => (\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\n          )}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Chart\n","// TODO PCS refactor ternaries\n/* eslint-disable no-nested-ternary */\nimport React, { useCallback, useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { formatDistanceToNowStrict } from 'date-fns'\nimport { Text, Flex, Box, Radio, Skeleton, LinkExternal, ArrowForwardIcon, ArrowBackIcon } from '@pancakeswap/uikit'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport { Transaction, TransactionType } from 'state/info/types'\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\n\nconst Wrapper = styled.div`\n  width: 100%;\n`\n\nconst ResponsiveGrid = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  align-items: center;\n  grid-template-columns: 2fr 0.8fr repeat(4, 1fr);\n  padding: 0 24px;\n  @media screen and (max-width: 940px) {\n    grid-template-columns: 2fr repeat(4, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 2fr repeat(2, 1fr);\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n  }\n  @media screen and (max-width: 500px) {\n    grid-template-columns: 2fr 1fr;\n    & > *:nth-child(5) {\n      display: none;\n    }\n    & > *:nth-child(3) {\n      display: none;\n    }\n    & > *:nth-child(4) {\n      display: none;\n    }\n    & > *:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst RadioGroup = styled(Flex)`\n  align-items: center;\n  margin-right: 16px;\n  margin-top: 8px;\n  cursor: pointer;\n`\n\nconst SORT_FIELD = {\n  amountUSD: 'amountUSD',\n  timestamp: 'timestamp',\n  sender: 'sender',\n  amountToken0: 'amountToken0',\n  amountToken1: 'amountToken1',\n}\n\nconst TableLoader: React.FC = () => {\n  const loadingRow = (\n    <ResponsiveGrid>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </ResponsiveGrid>\n  )\n  return (\n    <>\n      {loadingRow}\n      {loadingRow}\n      {loadingRow}\n    </>\n  )\n}\n\nconst DataRow: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\n  const { t } = useTranslation()\n  const abs0 = Math.abs(transaction.amountToken0)\n  const abs1 = Math.abs(transaction.amountToken1)\n  const outputTokenSymbol = transaction.amountToken0 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n  const inputTokenSymbol = transaction.amountToken1 < 0 ? transaction.token0Symbol : transaction.token1Symbol\n\n  return (\n    <ResponsiveGrid>\n      <LinkExternal href={getBscScanLink(transaction.hash, 'transaction')}>\n        <Text>\n          {transaction.type === TransactionType.MINT\n            ? t('Add %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })\n            : transaction.type === TransactionType.SWAP\n            ? t('Swap %token0% for %token1%', { token0: inputTokenSymbol, token1: outputTokenSymbol })\n            : t('Remove %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })}\n        </Text>\n      </LinkExternal>\n      <Text>${formatAmount(transaction.amountUSD)}</Text>\n      <Text>\n        <Text>{`${formatAmount(abs0)} ${transaction.token0Symbol}`}</Text>\n      </Text>\n      <Text>\n        <Text>{`${formatAmount(abs1)} ${transaction.token1Symbol}`}</Text>\n      </Text>\n      <LinkExternal href={getBscScanLink(transaction.sender, 'address')}>\n        {truncateHash(transaction.sender)}\n      </LinkExternal>\n      <Text>{formatDistanceToNowStrict(parseInt(transaction.timestamp, 10) * 1000)}</Text>\n    </ResponsiveGrid>\n  )\n}\n\nconst TransactionTable: React.FC<{\n  transactions: Transaction[]\n}> = ({ transactions }) => {\n  const [sortField, setSortField] = useState(SORT_FIELD.timestamp)\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\n\n  const { t } = useTranslation()\n\n  const [page, setPage] = useState(1)\n  const [maxPage, setMaxPage] = useState(1)\n\n  const [txFilter, setTxFilter] = useState<TransactionType | undefined>(undefined)\n\n  const sortedTransactions = useMemo(() => {\n    const toBeAbsList = [SORT_FIELD.amountToken0, SORT_FIELD.amountToken1]\n    return transactions\n      ? transactions\n          .slice()\n          .sort((a, b) => {\n            if (a && b) {\n              const firstField = a[sortField as keyof Transaction]\n              const secondField = b[sortField as keyof Transaction]\n              const [first, second] = toBeAbsList.includes(sortField)\n                ? [Math.abs(firstField as number), Math.abs(secondField as number)]\n                : [firstField, secondField]\n              return first > second ? (sortDirection ? -1 : 1) * 1 : (sortDirection ? -1 : 1) * -1\n            }\n            return -1\n          })\n          .filter((x) => {\n            return txFilter === undefined || x.type === txFilter\n          })\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\n      : []\n  }, [transactions, page, sortField, sortDirection, txFilter])\n\n  // Update maxPage based on amount of items & applied filtering\n  useEffect(() => {\n    if (transactions) {\n      const filteredTransactions = transactions.filter((tx) => {\n        return txFilter === undefined || tx.type === txFilter\n      })\n      if (filteredTransactions.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE))\n      } else {\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE) + 1)\n      }\n    }\n  }, [transactions, txFilter])\n\n  const handleFilter = useCallback(\n    (newFilter: TransactionType) => {\n      if (newFilter !== txFilter) {\n        setTxFilter(newFilter)\n        setPage(1)\n      }\n    },\n    [txFilter],\n  )\n\n  const handleSort = useCallback(\n    (newField: string) => {\n      setSortField(newField)\n      setSortDirection(sortField !== newField ? true : !sortDirection)\n    },\n    [sortDirection, sortField],\n  )\n\n  const arrow = useCallback(\n    (field: string) => {\n      const directionArrow = !sortDirection ? '↑' : '↓'\n      return sortField === field ? directionArrow : ''\n    },\n    [sortDirection, sortField],\n  )\n\n  return (\n    <Wrapper>\n      <Flex mb=\"16px\">\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(undefined)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === undefined} />\n            <Text ml=\"8px\">{t('All')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.SWAP)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.SWAP} />\n            <Text ml=\"8px\">{t('Swaps')}</Text>\n          </RadioGroup>\n        </Flex>\n\n        <Flex flexDirection={['column', 'row']}>\n          <RadioGroup onClick={() => handleFilter(TransactionType.MINT)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.MINT} />\n            <Text ml=\"8px\">{t('Adds')}</Text>\n          </RadioGroup>\n\n          <RadioGroup onClick={() => handleFilter(TransactionType.BURN)}>\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.BURN} />\n            <Text ml=\"8px\">{t('Removes')}</Text>\n          </RadioGroup>\n        </Flex>\n      </Flex>\n      <TableWrapper>\n        <ResponsiveGrid>\n          <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n            {t('Action')}\n          </Text>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountUSD)}\n            textTransform=\"uppercase\"\n          >\n            {t('Total Value')} {arrow(SORT_FIELD.amountUSD)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken0)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken0)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.amountToken1)}\n            textTransform=\"uppercase\"\n          >\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken1)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.sender)}\n            textTransform=\"uppercase\"\n          >\n            {t('Account')} {arrow(SORT_FIELD.sender)}\n          </ClickableColumnHeader>\n          <ClickableColumnHeader\n            color=\"secondary\"\n            fontSize=\"12px\"\n            bold\n            onClick={() => handleSort(SORT_FIELD.timestamp)}\n            textTransform=\"uppercase\"\n          >\n            {t('Time')} {arrow(SORT_FIELD.timestamp)}\n          </ClickableColumnHeader>\n        </ResponsiveGrid>\n        <Break />\n\n        {transactions ? (\n          <>\n            {sortedTransactions.map((transaction, index) => {\n              if (transaction) {\n                return (\n                  // eslint-disable-next-line react/no-array-index-key\n                  <React.Fragment key={index}>\n                    <DataRow transaction={transaction} />\n                    <Break />\n                  </React.Fragment>\n                )\n              }\n              return null\n            })}\n            {sortedTransactions.length === 0 ? (\n              <Flex justifyContent=\"center\">\n                <Text>{t('No Transactions')}</Text>\n              </Flex>\n            ) : undefined}\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setPage(page === maxPage ? page : page + 1)\n                }}\n              >\n                <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </>\n        ) : (\n          <>\n            <TableLoader />\n            {/* spacer */}\n            <Box />\n          </>\n        )}\n      </TableWrapper>\n    </Wrapper>\n  )\n}\n\nexport default TransactionTable\n","import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('SilverlineSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n","import React, { useMemo } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\n\nconst PoolsOverview: React.FC = () => {\n  const { t } = useTranslation()\n\n  // get all the pool datas that exist\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const [savedPools] = useWatchlistPools()\n  const watchlistPools = usePoolDatas(savedPools)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      <Card>\n        {watchlistPools.length > 0 ? (\n          <PoolTable poolDatas={watchlistPools} />\n        ) : (\n          <Text px=\"24px\" py=\"16px\">\n            {t('Saved pools will appear here')}\n          </Text>\n        )}\n      </Card>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\n        {t('All Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} />\n    </Page>\n  )\n}\n\nexport default PoolsOverview\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { createChart, IChartApi } from 'lightweight-charts'\nimport { format } from 'date-fns'\nimport useTheme from 'hooks/useTheme'\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\n\nconst CANDLE_CHART_HEIGHT = 250\n\nexport type LineChartProps = {\n  data: any[]\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\n  const { theme } = useTheme()\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const chartRef = useRef<HTMLDivElement>(null)\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\n\n  const handleResize = useCallback(() => {\n    if (chartCreated && chartRef?.current?.parentElement) {\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\n      chartCreated.timeScale().fitContent()\n      chartCreated.timeScale().scrollToPosition(0, false)\n    }\n  }, [chartCreated, chartRef])\n\n  // add event listener for resize\n  const isClient = typeof window === 'object'\n  useEffect(() => {\n    if (!isClient) {\n      return null\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\n\n  // if chart not instantiated in canvas, create it\n  useEffect(() => {\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\n      const chart = createChart(chartRef.current, {\n        height: CANDLE_CHART_HEIGHT,\n        width: chartRef.current.parentElement.clientWidth - 32,\n        layout: {\n          backgroundColor: 'transparent',\n          textColor: theme.colors.textSubtle,\n          fontFamily: 'Kanit, sans-serif',\n          fontSize: 12,\n        },\n        rightPriceScale: {\n          scaleMargins: {\n            top: 0.1,\n            bottom: 0.1,\n          },\n          borderVisible: false,\n        },\n        timeScale: {\n          borderVisible: false,\n          secondsVisible: true,\n          tickMarkFormatter: (unixTime: number) => {\n            return format(unixTime * 1000, 'MM/dd h:mm a')\n          },\n        },\n        watermark: {\n          visible: false,\n        },\n        grid: {\n          horzLines: {\n            visible: false,\n          },\n          vertLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          horzLine: {\n            visible: false,\n            labelVisible: false,\n          },\n          mode: 1,\n          vertLine: {\n            visible: true,\n            labelVisible: false,\n            style: 3,\n            width: 1,\n            color: theme.colors.textSubtle,\n            labelBackgroundColor: theme.colors.primary,\n          },\n        },\n      })\n\n      chart.timeScale().fitContent()\n      setChart(chart)\n    }\n  }, [chartCreated, data, setValue, theme])\n\n  useEffect(() => {\n    if (chartCreated && data) {\n      const series = chartCreated.addCandlestickSeries({\n        upColor: theme.colors.success,\n        downColor: theme.colors.failure,\n        borderDownColor: theme.colors.failure,\n        borderUpColor: theme.colors.success,\n        wickDownColor: theme.colors.failure,\n        wickUpColor: theme.colors.success,\n      })\n\n      series.setData(data)\n\n      // update the title when hovering on the chart\n      chartCreated.subscribeCrosshairMove((param) => {\n        if (\n          chartRef?.current &&\n          (param === undefined ||\n            param.time === undefined ||\n            (param && param.point && param.point.x < 0) ||\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\n            (param && param.point && param.point.y < 0) ||\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\n        ) {\n          // reset values\n          if (setValue) setValue(undefined)\n          if (setLabel) setLabel(undefined)\n        } else if (series && param) {\n          const timestamp = param.time as number\n          const now = new Date(timestamp * 1000)\n          const time = `${now.toLocaleString(locale, {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit',\n            timeZone: 'UTC',\n          })} (UTC)`\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\n          if (setValue) setValue(parsed?.open)\n          if (setLabel) setLabel(time)\n        }\n      })\n    }\n  }, [locale, chartCreated, data, setValue, setLabel, theme])\n\n  return (\n    <>\n      {!chartCreated && <CandleChartLoader />}\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\n    </>\n  )\n}\n\nexport default CandleChart\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport {\n  Text,\n  Flex,\n  Box,\n  Button,\n  Card,\n  Breadcrumbs,\n  Heading,\n  Spinner,\n  LinkExternal,\n  useMatchBreakpoints,\n  ButtonMenu,\n  ButtonMenuItem,\n  HelpIcon,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistPools } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-gap: 1em;\n  margin-top: 16px;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst TokenButton = styled(Flex)`\n  padding: 8px 0px;\n  margin-right: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst LockedTokensContainer = styled(Flex)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  background-color: ${({ theme }) => theme.colors.background};\n  padding: 16px;\n  flex-direction: column;\n  gap: 8px;\n  margin-top: 8px;\n  border-radius: 16px;\n  max-width: 280px;\n`\n\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\n    {},\n  )\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const poolData = usePoolDatas([address])[0]\n  const chartData = usePoolChartData(address)\n  const transactions = usePoolTransactions(address)\n\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\n\n  return (\n    <Page symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\n      {poolData ? (\n        <>\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\n            <Breadcrumbs mb=\"32px\">\n              <Link to=\"/info\">\n                <Text color=\"primary\">{t('Info')}</Text>\n              </Link>\n              <Link to=\"/info/pools\">\n                <Text color=\"primary\">{t('Pools')}</Text>\n              </Link>\n              <Flex>\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n              </Flex>\n            </Breadcrumbs>\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n              <LinkExternal mr=\"8px\" href={getBscScanLink(address, 'address')}>\n                {t('View on BscScan')}\n              </LinkExternal>\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\n            </Flex>\n          </Flex>\n          <Flex flexDirection=\"column\">\n            <Flex alignItems=\"center\" mb={['8px', null]}>\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\n              <Text\n                ml=\"38px\"\n                bold\n                fontSize={isXs || isSm ? '24px' : '40px'}\n                id=\"info-pool-pair-title\"\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\n                <Link to={`/info/token/${poolData.token0.address}`}>\n                  <TokenButton>\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token0.symbol} =  ${formatAmount(poolData.token1Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token1.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n                <Link to={`/info/token/${poolData.token1.address}`}>\n                  <TokenButton ml={[null, null, '10px']}>\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\n                      {`1 ${poolData.token1.symbol} =  ${formatAmount(poolData.token0Price, {\n                        notation: 'standard',\n                        displayThreshold: 0.001,\n                        tokenPrecision: true,\n                      })} ${poolData.token0.symbol}`}\n                    </Text>\n                  </TokenButton>\n                </Link>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n          </Flex>\n          <ContentLayout>\n            <Box>\n              <Card>\n                <Box p=\"24px\">\n                  <Flex justifyContent=\"space-between\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('Liquidity')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${formatAmount(poolData.liquidityUSD)}\n                      </Text>\n                      <Percent value={poolData.liquidityUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\n                        {t('LP reward APR')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        {formatAmount(poolData.lpApr7d)}%\n                      </Text>\n                      <Flex alignItems=\"center\">\n                        <span ref={targetRef}>\n                          <HelpIcon color=\"textSubtle\" />\n                        </span>\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\n                          {t('7D performance')}\n                        </Text>\n                        {tooltipVisible && tooltip}\n                      </Flex>\n                    </Flex>\n                  </Flex>\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Total Tokens Locked')}\n                  </Text>\n                  <LockedTokensContainer>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token0.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\n                    </Flex>\n                    <Flex justifyContent=\"space-between\">\n                      <Flex>\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\n                        <Text small color=\"textSubtle\" ml=\"8px\">\n                          {poolData.token1.symbol}\n                        </Text>\n                      </Flex>\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\n                    </Flex>\n                  </LockedTokensContainer>\n                </Box>\n              </Card>\n              <Card mt=\"16px\">\n                <Flex flexDirection=\"column\" p=\"24px\">\n                  <ButtonMenu\n                    activeIndex={showWeeklyData}\n                    onItemClick={(index) => setShowWeeklyData(index)}\n                    scale=\"sm\"\n                    variant=\"subtle\"\n                  >\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\n                  </ButtonMenu>\n                  <Flex mt=\"24px\">\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\n                      </Text>\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\n                    </Flex>\n                    <Flex flex=\"1\" flexDirection=\"column\">\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\n                      </Text>\n                      <Text fontSize=\"24px\" bold>\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\n                      </Text>\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\n                        {t('out of $%totalFees% total fees', {\n                          totalFees: showWeeklyData\n                            ? formatAmount(poolData.totalFees7d)\n                            : formatAmount(poolData.totalFees24h),\n                        })}\n                      </Text>\n                    </Flex>\n                  </Flex>\n                </Flex>\n              </Card>\n            </Box>\n            <ChartCard variant=\"pool\" chartData={chartData} />\n          </ContentLayout>\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\n            {t('Transactions')}\n          </Heading>\n          <TransactionTable transactions={transactions} />\n        </>\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default PoolPage\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Text, Flex, Box, Card } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useAllTokenData } from 'state/info/hooks'\nimport { TokenData } from 'state/info/types'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport { useTranslation } from 'contexts/Localization'\n\nconst CardWrapper = styled(Link)`\n  display: inline-block;\n  min-width: 190px;\n  margin-left: 16px;\n  :hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst TopMoverCard = styled(Box)`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  padding: 16px;\n`\n\nexport const ScrollableRow = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 16px 0;\n  white-space: nowrap;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\n  return (\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\n      <TopMoverCard>\n        <Flex>\n          <Box width=\"32px\" height=\"32px\">\n            {/* wrapped in a box because of alignment issues between img and svg */}\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\n          </Box>\n          <Box ml=\"16px\">\n            <Text>{tokenData.symbol}</Text>\n            <Flex alignItems=\"center\">\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\n                ${formatAmount(tokenData.priceUSD)}\n              </Text>\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\n            </Flex>\n          </Box>\n        </Flex>\n      </TopMoverCard>\n    </CardWrapper>\n  )\n}\n\nconst TopTokenMovers: React.FC = () => {\n  const allTokens = useAllTokenData()\n  const { t } = useTranslation()\n\n  const topPriceIncrease = useMemo(() => {\n    return Object.values(allTokens)\n      .sort(({ data: a }, { data: b }) => {\n        // eslint-disable-next-line no-nested-ternary\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\n      })\n      .slice(0, Math.min(20, Object.values(allTokens).length))\n  }, [allTokens])\n\n  const increaseRef = useRef<HTMLDivElement>(null)\n  const moveLeftRef = useRef<boolean>(true)\n\n  useEffect(() => {\n    const scrollInterval = setInterval(() => {\n      if (increaseRef.current) {\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\n          moveLeftRef.current = false\n        } else if (increaseRef.current.scrollLeft === 0) {\n          moveLeftRef.current = true\n        }\n        increaseRef.current.scrollTo(\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\n          0,\n        )\n      }\n    }, 30)\n\n    return () => {\n      clearInterval(scrollInterval)\n    }\n  }, [])\n\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\n    return null\n  }\n\n  return (\n    <Card my=\"16px\">\n      <Text ml=\"16px\" mt=\"8px\">\n        {t('Top Movers')}\n      </Text>\n      <ScrollableRow ref={increaseRef}>\n        {topPriceIncrease.map((entry) =>\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\n        )}\n      </ScrollableRow>\n    </Card>\n  )\n}\n\nexport default TopTokenMovers\n","import React, { useMemo, useEffect } from 'react'\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\n\nconst TokensOverview: React.FC = () => {\n  const { t } = useTranslation()\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const [savedTokens] = useWatchlistTokens()\n  const watchListTokens = useTokenDatas(savedTokens)\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\">\n        {t('Your Watchlist')}\n      </Heading>\n      {savedTokens.length > 0 ? (\n        <TokenTable tokenDatas={watchListTokens} />\n      ) : (\n        <Card>\n          <Text py=\"16px\" px=\"24px\">\n            {t('Saved tokens will appear here')}\n          </Text>\n        </Card>\n      )}\n      <TopTokenMovers />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\n        {t('All Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n    </Page>\n  )\n}\n\nexport default TokensOverview\n","import { useState, useEffect } from 'react'\n\n// endpoint to check asset exists and get url to CMC page\n// returns 400 status code if token is not on CMC\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\n\n/**\n * Check if asset exists on CMC, if exists\n * return  url, if not return undefined\n * @param address token address (all lowercase, checksummed are not supported by CMC)\n */\nconst useCMCLink = (address: string): string | undefined => {\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\n\n  useEffect(() => {\n    const fetchLink = async () => {\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\n      // if link exists, format the url\n      if (result.status === 200) {\n        result.json().then(({ data }) => {\n          setCMCPageUrl(data.url)\n        })\n      }\n    }\n    if (address) {\n      fetchLink()\n    }\n  }, [address])\n\n  return cmcPageUrl\n}\n\nexport default useCMCLink\n","/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useMemo } from 'react'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport { Duration } from 'date-fns'\nimport styled from 'styled-components'\nimport {\n  Text,\n  Box,\n  Heading,\n  Button,\n  Card,\n  Flex,\n  Breadcrumbs,\n  Link as UIKitLink,\n  LinkExternal,\n  Spinner,\n  Image,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport Percent from 'views/Info/components/Percent'\nimport SaveIcon from 'views/Info/components/SaveIcon'\nimport {\n  usePoolDatas,\n  useTokenData,\n  usePoolsForToken,\n  useTokenChartData,\n  useTokenPriceData,\n  useTokenTransactions,\n} from 'state/info/hooks'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\nimport { useWatchlistTokens } from 'state/user/hooks'\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\nimport { useTranslation } from 'contexts/Localization'\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\n\nconst ContentLayout = styled.div`\n  margin-top: 16px;\n  display: grid;\n  grid-template-columns: 260px 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 800px) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr;\n  }\n`\n\nconst StyledCMCLink = styled(UIKitLink)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n\n  & :hover {\n    opacity: 0.8;\n  }\n`\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\n\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\n  match: {\n    params: { address: routeAddress },\n  },\n}) => {\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { t } = useTranslation()\n\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [])\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  const address = routeAddress.toLowerCase()\n\n  const cmcLink = useCMCLink(address)\n\n  const tokenData = useTokenData(address)\n  const poolsForToken = usePoolsForToken(address)\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\n  const transactions = useTokenTransactions(address)\n  const chartData = useTokenChartData(address)\n\n  // pricing data\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\n  const adjustedPriceData = useMemo(() => {\n    // Include latest available price\n    if (priceData && tokenData && priceData.length > 0) {\n      return [\n        ...priceData,\n        {\n          time: new Date().getTime() / 1000,\n          open: priceData[priceData.length - 1].close,\n          close: tokenData?.priceUSD,\n          high: tokenData?.priceUSD,\n          low: priceData[priceData.length - 1].close,\n        },\n      ]\n    }\n    return undefined\n  }, [priceData, tokenData])\n\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\n\n  return (\n    <Page symbol={tokenData?.symbol}>\n      {tokenData ? (\n        !tokenData.exists ? (\n          <Card>\n            <Box p=\"16px\">\n              <Text>\n                {t('No pool has been created with this token yet. Create one')}\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\n                  {t('here.')}\n                </Link>\n              </Text>\n            </Box>\n          </Card>\n        ) : (\n          <>\n            {/* Stuff on top */}\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\n              <Breadcrumbs mb=\"32px\">\n                <Link to=\"/info\">\n                  <Text color=\"primary\">{t('Info')}</Text>\n                </Link>\n                <Link to=\"/info/tokens\">\n                  <Text color=\"primary\">{t('Tokens')}</Text>\n                </Link>\n                <Flex>\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\n                  <Text>{`(${truncateHash(address)})`}</Text>\n                </Flex>\n              </Breadcrumbs>\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\n                  {t('View on BscScan')}\n                </LinkExternal>\n                {cmcLink && (\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\n                  </StyledCMCLink>\n                )}\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\n              </Flex>\n            </Flex>\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\n                <Flex alignItems=\"center\">\n                  <CurrencyLogo size=\"32px\" address={address} />\n                  <Text\n                    ml=\"12px\"\n                    bold\n                    lineHeight=\"0.7\"\n                    fontSize={isXs || isSm ? '24px' : '40px'}\n                    id=\"info-token-name-title\"\n                  >\n                    {tokenData.name}\n                  </Text>\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\n                    ({tokenData.symbol})\n                  </Text>\n                </Flex>\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\n                  </Text>\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\n                </Flex>\n              </Flex>\n              <Flex>\n                <Link to={`/add/${address}`}>\n                  <Button mr=\"8px\" variant=\"secondary\">\n                    {t('Add Liquidity')}\n                  </Button>\n                </Link>\n                <Link to={`/swap?inputCurrency=${address}`}>\n                  <Button>{t('Trade')}</Button>\n                </Link>\n              </Flex>\n            </Flex>\n\n            {/* data on the right side of chart */}\n            <ContentLayout>\n              <Card>\n                <Box p=\"24px\">\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Liquidity')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.liquidityUSD)}\n                  </Text>\n                  <Percent value={tokenData.liquidityUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\n                    ${formatAmount(tokenData.volumeUSD)}\n                  </Text>\n                  <Percent value={tokenData.volumeUSDChange} />\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Volume 7D')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    ${formatAmount(tokenData.volumeUSDWeek)}\n                  </Text>\n\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\n                    {t('Transactions 24H')}\n                  </Text>\n                  <Text bold fontSize=\"24px\">\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\n                  </Text>\n                </Box>\n              </Card>\n              {/* charts card */}\n              <ChartCard\n                variant=\"token\"\n                chartData={chartData}\n                tokenData={tokenData}\n                tokenPriceData={adjustedPriceData}\n              />\n            </ContentLayout>\n\n            {/* pools and transaction tables */}\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Pools')}\n            </Heading>\n\n            <PoolTable poolDatas={poolDatas} />\n\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\n              {t('Transactions')}\n            </Heading>\n\n            <TransactionTable transactions={transactions} />\n          </>\n        )\n      ) : (\n        <Flex mt=\"80px\" justifyContent=\"center\">\n          <Spinner />\n        </Flex>\n      )}\n    </Page>\n  )\n}\n\nexport default TokenPage\n","import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { isAddress } from 'ethers/lib/utils'\nimport TokenPage from './TokenPage'\n\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address },\n    },\n  } = props\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!isAddress(address.toLowerCase())) {\n    return <Redirect to=\"/\" />\n  }\n  return <TokenPage {...props} />\n}\n\nexport default RedirectInvalidToken\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\nimport InfoNav from './components/InfoNav'\nimport Overview from './Overview'\nimport Pools from './Pools'\nimport PoolPage from './Pools/PoolPage'\nimport Tokens from './Tokens'\nimport RedirectInvalidToken from './Tokens/redirects'\n\nconst Info: React.FC = () => {\n  return (\n    <>\n      <ProtocolUpdater />\n      <PoolUpdater />\n      <TokenUpdater />\n      <InfoNav />\n      <Route path=\"/info\" exact>\n        <Overview />\n      </Route>\n      <Route path=\"/info/pools\" exact>\n        <Pools />\n      </Route>\n      <Route path=\"/info/tokens\" exact>\n        <Tokens />\n      </Route>\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\n      <Route exact path={['/info/pools/:address', '/info/pool/:address', '/info/pair/:address']} component={PoolPage} />\n    </>\n  )\n}\n\nexport default Info\n","import React from 'react'\nimport { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled.button<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  padding: 16px;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : '#000')};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n  &:hover {\n    opacity: unset !important;\n  }\n`\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n"],"sourceRoot":""}