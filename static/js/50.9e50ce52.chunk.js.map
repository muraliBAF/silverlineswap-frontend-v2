{"version":3,"sources":["views/Swap/components/Chart/SwapLineChart.tsx"],"names":["HoverUpdater","locale","payload","setHoverValue","setHoverDate","useEffect","value","time","toLocaleString","year","month","day","hour","minute","dateFormattingByTimewindow","PairDataTimeWindowEnum","DAY","WEEK","MONTH","YEAR","LineChart","data","isChangePositive","timeWindow","useTranslation","currentLanguage","theme","useTheme","colors","gradient1","gradient2","stroke","dateFormatting","length","margin","top","right","left","bottom","onMouseLeave","undefined","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","axisLine","tickLine","tickFormatter","minTickGap","domain","hide","cursor","textDisabled","contentStyle","display","formatter","tooltipValue","name","props","type","fill","strokeWidth"],"mappings":"+PAiBMA,EAAe,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aActD,OAbAC,qBAAU,WACRF,EAAcD,EAAQI,OACtBF,EACEF,EAAQK,KAAKC,eAAeP,EAAQ,CAClCQ,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,eAGX,CAACZ,EAAQC,EAAQI,MAAOJ,EAAQK,KAAMJ,EAAeC,IAEjD,MASHU,GAAsF,mBACzFC,IAAuBC,IAAM,CAC5BJ,KAAM,UACNC,OAAQ,YAHgF,cAKzFE,IAAuBE,KAAO,CAC7BP,MAAO,QACPC,IAAK,YAPmF,cASzFI,IAAuBG,MAAQ,CAC9BR,MAAO,QACPC,IAAK,YAXmF,cAazFI,IAAuBI,KAAO,CAC7BT,MAAO,QACPC,IAAK,YAfmF,GAgF7ES,UA1DG,SAAC,GAA6F,IAA3FC,EAA0F,EAA1FA,KAAMlB,EAAoF,EAApFA,cAAeC,EAAqE,EAArEA,aAAckB,EAAuD,EAAvDA,iBAAkBC,EAAqC,EAArCA,WAEnDtB,EACjBuB,cADFC,gBAAmBxB,OAEbyB,EAAUC,cAAVD,MACFE,EAAwB,CAAEN,oBAjCRA,iBAEpB,CAAEO,UAAW,UAAWC,UAAW,UAAWC,OAAQ,WACtD,CAAEF,UAAW,UAAWC,UAAW,UAAWC,OAAQ,YA+BpDC,EAAiBlB,EAA2BS,GAElD,OAAKF,GAAwB,IAAhBA,EAAKY,OAIhB,cAAC,IAAD,UACE,eAAC,IAAD,CACEZ,KAAMA,EACNa,OAAQ,CACNC,IAAK,EACLC,MAAO,EACPC,KAAM,EACNC,OAAQ,GAEVC,aAAc,WACRnC,GAAcA,OAAaoC,GAC3BrC,GAAeA,OAAcqC,IAVrC,UAaE,+BACE,iCAAgBC,GAAG,WAAWC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAtD,UACE,sBAAMC,OAAO,KAAKC,UAAWnB,EAAOC,UAAWmB,YAAa,MAC5D,sBAAMF,OAAO,OAAOC,UAAWnB,EAAOE,UAAWkB,YAAa,SAGlE,cAAC,IAAD,CACEC,QAAQ,OACRC,UAAU,EACVC,UAAU,EACVC,cAAe,SAAC7C,GAAD,OAAUA,EAAKC,eAAeP,EAAQ+B,IACrDqB,WAAY,IAEd,cAAC,IAAD,CAAOJ,QAAQ,QAAQC,UAAU,EAAOC,UAAU,EAAOG,OAAQ,CAAC,OAAQ,QAASC,MAAI,IACvF,cAAC,IAAD,CACEC,OAAQ,CAAEzB,OAAQL,EAAME,OAAO6B,cAC/BC,aAAc,CAAEC,QAAS,QACzBC,UAAW,SAACC,EAAcC,EAAMC,GAArB,OACT,cAAC/D,EAAD,CACEC,OAAQA,EACRC,QAAS6D,EAAM7D,QACfC,cAAeA,EACfC,aAAcA,OAIpB,cAAC,IAAD,CAAM6C,QAAQ,QAAQe,KAAK,SAASjC,OAAQH,EAAOG,OAAQkC,KAAK,iBAAiBC,YAAa,SA3C3F,cAAC,IAAD","file":"static/js/50.9e50ce52.chunk.js","sourcesContent":["import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { PairDataTimeWindowEnum } from 'state/swap/types'\nimport { useTranslation } from 'contexts/Localization'\n\nexport type SwapLineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of valye\n  isChangePositive: boolean\n  timeWindow: PairDataTimeWindowEnum\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(\n      payload.time.toLocaleString(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n      }),\n    )\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst getChartColors = ({ isChangePositive }) => {\n  return isChangePositive\n    ? { gradient1: '#00E7B0', gradient2: '#0C8B6C', stroke: '#31D0AA' }\n    : { gradient1: '#ED4B9E', gradient2: '#ED4B9E', stroke: '#ED4B9E ' }\n}\n\nconst dateFormattingByTimewindow: Record<PairDataTimeWindowEnum, Intl.DateTimeFormatOptions> = {\n  [PairDataTimeWindowEnum.DAY]: {\n    hour: '2-digit',\n    minute: '2-digit',\n  },\n  [PairDataTimeWindowEnum.WEEK]: {\n    month: 'short',\n    day: '2-digit',\n  },\n  [PairDataTimeWindowEnum.MONTH]: {\n    month: 'short',\n    day: '2-digit',\n  },\n  [PairDataTimeWindowEnum.YEAR]: {\n    month: 'short',\n    day: '2-digit',\n  },\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate, isChangePositive, timeWindow }: SwapLineChartProps) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { theme } = useTheme()\n  const colors = getChartColors({ isChangePositive })\n  const dateFormatting = dateFormattingByTimewindow[timeWindow]\n\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 0,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={colors.gradient1} stopOpacity={0.34} />\n            <stop offset=\"100%\" stopColor={colors.gradient2} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => time.toLocaleString(locale, dateFormatting)}\n          minTickGap={8}\n        />\n        <YAxis dataKey=\"value\" axisLine={false} tickLine={false} domain={['auto', 'auto']} hide />\n        <Tooltip\n          cursor={{ stroke: theme.colors.textDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater\n              locale={locale}\n              payload={props.payload}\n              setHoverValue={setHoverValue}\n              setHoverDate={setHoverDate}\n            />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"linear\" stroke={colors.stroke} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n"],"sourceRoot":""}