{"version":3,"sources":["views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/ActivityHistory/ClearAllButton.tsx","views/Nft/market/ActivityHistory/ActivityFilter.tsx","views/Nft/market/ActivityHistory/ActivityFilters.tsx","views/Nft/market/ActivityHistory/ActivityHistory.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx"],"names":["sortActivity","askOrders","transactions","allActivity","map","askOrderHistory","marketEvent","orderType","AskOrderType","CANCEL","MarketEvent","MODIFY","NEW","getAskOrderEvent","price","askPrice","timestamp","nft","tx","id","seller","transactionHistory","SELL","buyer","length","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ClearAllButton","collectionAddress","props","dispatch","useAppDispatch","t","useTranslation","variant","scale","onClick","removeAllActivityFilters","TriggerButton","styled","Button","hasItem","CloseButton","IconButton","eventName","eventType","ActivityFilter","nftActivityFilters","useGetNftActivityFilters","isEventSelected","typeFilters","some","nftActivityFilter","alignItems","mr","mb","addActivityTypeFilters","collection","field","removeActivityTypeFilters","color","width","Container","Flex","theme","mediaQueries","sm","ScrollableFlexContainer","md","ActivityFilters","address","justifyContent","flexDirection","textTransform","fontSize","bold","isEmpty","ActivityHistory","useTheme","useState","activity","currentPage","maxPage","paginationData","setPaginationData","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","isLoading","setIsLoading","isInitialized","setIsInitialized","queryPage","setQueryPage","useLastUpdated","lastUpdated","refresh","setLastUpdated","bnbBusdPrice","useBNBBusdPrice","useMatchBreakpoints","isXs","isSm","nftActivityFiltersString","JSON","stringify","useEffect","fetchCollectionActivity","a","nftActivityFiltersParsed","parse","getCollectionActivity","toLowerCase","collectionActivity","Math","ceil","console","error","isAddress","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","tokenId","getNftsFromDifferentCollectionsApi","nfts","slice","py","px","style","gap","padding","disabled","overflowX","textAlign","nftMeta","find","metaNft","ActivityRow","TableLoader","borderTop","colors","cardBorder","pt","height","prevState","page","p","NoNftsImage","div","PageButtons","Arrow","primary","Avatar","img","StyledFlex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","FetchStatus","Fetched","image","thumbnail","src","to","nftsBaseUrl","display","lineHeight","truncateHash","GridItem","LoadingRow","ActivityEventText","events","text","BUY","RoundedImage","Image","radii","default","MobileModal","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","priceAsFloat","parseFloat","priceInUsd","multiplyPriceByAmount","title","headerBackground","gradients","cardHeader","maxWidth","collectionName","name","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","otherParty","as","Link","external","href","getBscScanLink","ActivityPrice","justifySelf","isNftActivity","timestampAsMs","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","pancakeBunniesAddress","attributes","attribute","traitType","value","event","stopPropagation","alt","RouterLink"],"mappings":"2LAGaA,EAAe,SAAC,GAMV,IAAD,IALhBC,iBAKgB,MALJ,GAKI,MAJhBC,oBAIgB,MAJD,GAIC,EAyCVC,EAAW,sBAA0BF,EAZKG,KAAI,SAACC,GAMjD,MAAO,CAAEC,YAlCY,SAACC,GACxB,OAAQA,GACN,KAAKC,IAAaC,OAChB,OAAOC,IAAYD,OACrB,KAAKD,IAAaG,OAChB,OAAOD,IAAYC,OACrB,KAAKH,IAAaI,IAChB,OAAOF,IAAYE,IACrB,QACE,OAAOF,IAAYC,QAoBDE,CAAiBR,EAAgBE,WAK/BO,MAJRT,EAAgBU,SAIDC,UAHFX,EAAnBW,UAGgCC,IAHbZ,EAARY,IAG0BC,GAFlCb,EAAgBc,GAEsBC,OADrC,OAAGf,QAAH,IAAGA,OAAH,EAAGA,EAAiBe,OAAOD,QAO1B,YAA+DjB,EA1B1BE,KAAI,SAACiB,GACvD,IAAMf,EAAcI,IAAYY,KACxBN,EAAmBK,EAAnBL,UAAWC,EAAQI,EAARJ,IAKnB,MAAO,CAAEX,cAAaQ,MAJRO,EAAmBN,SAIJC,YAAWC,MAAKC,GAHlCG,EAAmBF,GAGmBI,MAFnCF,EAAmBE,MAAMJ,GAEiBC,OADzCC,EAAmBD,OAAOD,SAqB7C,OAAIhB,EAAYqB,OAAS,EACIrB,EAAYsB,MAAK,SAACC,EAAeC,GAC1D,IAAMC,EAAaC,IAAOC,UAAUC,KAAKL,EAAcV,WAEvD,OADmBa,IAAOC,UAAUC,KAAKJ,EAAcX,WACrCgB,IAAIJ,GAAYK,cAK/B,K,0SCnCMC,EAfuC,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,kBAAsBC,EAAY,iBACnFC,EAAWC,cACTC,EAAMC,cAAND,EAMR,OACE,cAAC,IAAD,yBAAwBE,QAAQ,OAAOC,MAAM,KAAKC,QALnC,WACfN,EAASO,YAAyBT,MAIuCC,GAAzE,aACGG,EAAE,WADO,cCJVM,EAAgBC,YAAOC,IAAPD,CAAH,mCACf,qBAAGE,SACI,0GAQLC,EAAcH,YAAOI,KAAPJ,CAAH,2FAKXK,EAAY,SAACZ,EAAoBa,GACrC,OAAQA,GACN,KAAK1C,IAAYD,OACf,OAAO8B,EAAE,YACX,KAAK7B,IAAYC,OACf,OAAO4B,EAAE,YACX,KAAK7B,IAAYE,IACf,OAAO2B,EAAE,UACX,KAAK7B,IAAYY,KACf,OAAOiB,EAAE,QACX,QACE,MAAO,KAIAc,EAAgD,SAAC,GAAsC,IAApCD,EAAmC,EAAnCA,UAAWjB,EAAwB,EAAxBA,kBACnEmB,EAAqBC,YAAyBpB,GAC9CE,EAAWC,cACTC,EAAMC,cAAND,EAEFiB,EAAkBF,EAAmBG,YAAYC,MAAK,SAACC,GAAD,OAAuBA,IAAsBP,KAYzG,OACE,eAAC,KAAD,CAAMQ,WAAW,SAASC,GAAG,MAAMC,GAAG,MAAtC,UACE,cAAC,IAAD,UACE,cAACjB,EAAD,CACEF,QAdgB,WACjBa,GACHnB,EAAS0B,YAAuB,CAAEC,WAAY7B,EAAmB8B,MAAOb,MAapEX,QAASe,EAAkB,SAAW,QACtCd,MAAM,KACNM,QAASQ,EAJX,SAMGL,EAAUZ,EAAGa,OAGjBI,GACC,cAACP,EAAD,CAAaR,QAASe,EAAkB,SAAW,QAASd,MAAM,KAAKC,QAjBrD,WACtBN,EAAS6B,YAA0B,CAAEF,WAAY7B,EAAmB8B,MAAOb,MAgBvE,SACE,cAAC,IAAD,CAAWe,MAAM,eAAeC,MAAM,eClEnCC,EAAYvB,YAAOwB,KAAPxB,CAAH,uGAGlB,qBAAGyB,MAAkBC,aAAaC,MAMhCC,EAA0B5B,YAAOwB,KAAPxB,CAAH,gNAOzB,qBAAGyB,MAAkBC,aAAaG,MA+BvBC,EArBiC,SAAC,GAAoB,IAC3DC,GAD0D,EAAjBb,YACf,CAAEa,QAAS,KAArCA,QACAtC,EAAMC,cAAND,EAEFe,EAAqBC,YAAyBsB,GAEpD,OACE,eAAC,EAAD,CAAWC,eAAe,gBAAgBC,cAAe,CAAC,SAAU,SAAU,OAA9E,UACE,cAAC,KAAD,CAAMC,cAAc,YAAYb,MAAM,aAAac,SAAS,OAAOC,MAAI,EAAvE,SACG3C,EAAE,eAEL,cAACmC,EAAD,UACG,CAAChE,IAAYE,IAAKF,IAAYD,OAAQC,IAAYC,OAAQD,IAAYY,MAAMlB,KAAI,SAACgD,GAChF,OAAO,cAAC,EAAD,CAAgCA,UAAWA,EAAWjB,kBAAmB0C,GAApDzB,QAG9B+B,IAAQ7B,EAAmBG,aAAgE,KAAjD,cAAC,EAAD,CAAgBtB,kBAAmB0C,Q,mBCiNtEO,IA/NyC,SAAC,GAAoB,IAAlBpB,EAAiB,EAAjBA,WACnD3B,EAAWC,cACAH,GAAsB6B,GAAc,CAAEa,QAAS,KAAxDA,QACFvB,EAAqBC,YAAyBpB,GAC5CoC,EAAUc,cAAVd,MACAhC,EAAMC,cAAND,EACR,EAA4C+C,mBAIzC,CACDC,SAAU,GACVC,YAAa,EACbC,QAAS,IAPX,mBAAOC,EAAP,KAAuBC,EAAvB,KASA,EAA8CL,mBAAqB,IAAnE,mBAAOM,EAAP,KAAwBC,EAAxB,KACA,EAAsCP,mBAAqB,IAA3D,mBAAOQ,EAAP,KAAoBC,EAApB,KACA,EAAkCT,oBAAS,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KACA,EAA0CX,oBAAS,GAAnD,mBAAOY,EAAP,KAAsBC,EAAtB,KACA,EAAkCb,mBAAS,GAA3C,mBAAOc,EAAP,KAAkBC,EAAlB,KACA,GAAiDC,cAAzCC,GAAR,GAAQA,YAA6BC,GAArC,GAAqBC,eACfC,GAAeC,cACrB,GAAuBC,eAAfC,GAAR,GAAQA,KAAMC,GAAd,GAAcA,KAERC,GAA2BC,KAAKC,UAAU3D,GAuDhD,OArDA4D,qBAAU,WACR,IAAMC,EAAuB,uCAAG,gCAAAC,EAAA,sEAE5BnB,GAAa,GACPoB,EAA2BL,KAAKM,MAAMP,IAHhB,SAIKQ,YAC/BpF,EAAkBqF,cAClBH,EAvCY,KAiCc,OAItBI,EAJsB,OAStBlC,EAAWvF,YAAayH,GAC9B9B,EAAkB,CAChBJ,WACAC,YAAa,EACbC,QAASiC,KAAKC,KAAKpC,EAAS/D,OAhDjB,IAgD2C,IAExDyE,GAAa,GACbE,GAAiB,GAhBW,kDAkB5ByB,QAAQC,MAAM,sCAAd,MAlB4B,0DAAH,sDAsBxB1F,GAAqB2F,YAAU3F,IAA6C,KAAtBA,IACzDgF,MAED,CAAC9E,EAAUF,EAAmB4E,GAA0BR,KAE3DW,qBAAU,WACR,IAAMa,EAAwB,uCAAG,8BAAAX,EAAA,6DACzBY,EAAsBC,iBAC1BrC,EAAgBxF,KAAI,SAACmF,GACnB,MAAO,CAAE2C,QAAS3C,EAAStE,IAAIiH,QAAS/F,kBAAmBoD,EAAStE,IAAI+C,WAAW7C,OAErF,WAL6B,SAOZgH,YAAmCH,GAPvB,OAOzBI,EAPyB,OAQ/BrC,EAAeqC,GARgB,2CAAH,qDAW1BxC,EAAgBpE,OAAS,GAC3BuG,MAED,CAACnC,IAEJsB,qBAAU,WACR,IAAMmB,EAAQ3C,EAAeH,SAAS8C,MAhFrB,GAiFC3C,EAAeF,YAAc,GAjF9B,EAkFAE,EAAeF,aAEhCK,EAAmBwC,KAClB,CAAC3C,IAGF,eAAC,IAAD,CAAK4C,GAAG,OAAR,UACE,cAACjE,EAAA,EAAD,CAAWkE,GAAI,CAAC,EAAG,KAAM,QAAzB,SACE,eAAC,KAAD,CACEC,MAAO,CAAEC,IAAK,OAAQC,QAAS,UAC/B9E,WAAY,CAAC,KAAM,KAAM,UACzBmB,cAAe,CAAC,SAAU,SAAU,OAHtC,UAKE,cAAC,EAAD,CAAiBf,WAAYA,IAC7B,cAAC,IAAD,CACEtB,MAAM,KACNiG,SAAU3C,EACVrD,QAAS,WACP6D,MAJJ,SAOGjE,EAAE,kBAIT,cAAC8B,EAAA,EAAD,CAAWmE,MAAO,CAAEI,UAAW,QAA/B,SACsC,IAAnClD,EAAeH,SAAS/D,QACF,IAAvBsE,EAAYtE,QACe,IAA3BoE,EAAgBpE,QACfwE,EAQC,qCACE,eAAC,KAAD,WACE,gCACE,+BACE,eAAC,KAAD,CAAI6C,UAAW,CAAC,SAAU,KAAM,QAAhC,cAA2CtG,EAAE,WAC7C,eAAC,KAAD,CAAIsG,UAAU,QAAd,cAAwBtG,EAAE,YACzBsE,IAAQC,GAAO,KACd,qCACE,eAAC,KAAD,CAAI+B,UAAU,QAAd,cAAwBtG,EAAE,YAC1B,eAAC,KAAD,CAAIsG,UAAU,SAAd,cAAyBtG,EAAE,WAC3B,eAAC,KAAD,CAAIsG,UAAU,SAAd,cAAyBtG,EAAE,YAG/B,eAAC,KAAD,CAAIsG,UAAU,SAAd,cAAyBtG,EAAE,WAC1BsE,IAAQC,GAAO,KAAO,cAAC,KAAD,SAI3B,gCACIZ,EAGAN,EAAgBxF,KAAI,SAACmF,GACnB,IAAMuD,EAAUhD,EAAYiD,MAAK,SAACC,GAAD,OAAaA,EAAQd,UAAY3C,EAAStE,IAAIiH,WAC/E,OACE,cAACe,EAAA,EAAD,CAEE1D,SAAUA,EACVtE,IAAK6H,EACLpC,aAAcA,IAJhB,UACUnB,EAASjF,YADnB,YACkCiF,EAAStE,IAAIiH,QAD/C,YAC0D3C,EAASvE,UADnE,YACgFuE,EAASrE,QAN7F,cAACgI,EAAA,EAAD,SAgBN,cAAC,KAAD,CACEC,UAAS,cAAS5E,EAAM6E,OAAOC,WAAtB,UACTC,GAAG,OACHvE,cAAc,SACdD,eAAe,gBACfyE,OAAO,OALT,SAOE,eAAC,IAAD,WACE,cAAC,IAAD,CACE5G,QAAS,WAC4B,IAA/B+C,EAAeF,aACjBG,GAAkB,SAAC6D,GAAD,mBAAC,eACdA,GADa,IAEhBhE,YAAagE,EAAUhE,YAAc,QAL7C,SAUE,cAAC,IAAD,CAAerB,MAAsC,IAA/BuB,EAAeF,YAAoB,eAAiB,cAE5E,cAAC,KAAD,UACGjD,EAAE,2BAA4B,CAC7BkH,KAAM/D,EAAeF,YACrBC,QAASC,EAAeD,YAG5B,cAAC,IAAD,CACE9C,QAAO,sBAAE,gCAAAyE,EAAA,yDACH1B,EAAeF,cAAgBE,EAAeD,QAD3C,oBAELE,GAAkB,SAAC6D,GAAD,mBAAC,eACdA,GADa,IAEhBhE,YAAagE,EAAUhE,YAAc,OAIrCE,EAAeD,QAAUC,EAAeF,cAAgB,GACxDE,EAAeH,SAAS/D,SA7L1B,IA6LqD4E,EAThD,iCAYDH,GAAa,GACPoB,EAA2BL,KAAKM,MAAMP,IAb3C,SAcgCQ,YAC/BpF,EAAkBqF,cAClBH,EApMN,KAqMuBjB,EAAY,IAjB9B,OAcKqB,EAdL,OAmBKlC,EAAWvF,YAAayH,GAC9B9B,GAAkB,SAAC6D,GACjB,OAAO,2BACFA,GADL,IAEEjE,WACAE,QAASiC,KAAKC,KAAKpC,EAAS/D,OA9MrC,IA8M+D,OAG1DyE,GAAa,GACbI,GAAa,SAACmD,GAAD,OAAeA,EAAY,KA5BvC,kDA8BD5B,QAAQC,MAAM,sCAAd,MA9BC,0DADX,SAqCE,cAAC,IAAD,CACE1D,MAAOuB,EAAeF,cAAgBE,EAAeD,QAAU,eAAiB,sBA3G1F,eAAC,KAAD,CAAMiE,EAAE,OAAO3E,cAAc,SAASnB,WAAW,SAAjD,UACE,cAAC+F,EAAA,EAAD,IACA,cAAC,KAAD,CAAML,GAAG,MAAMpE,MAAI,EAAnB,SACG3C,EAAE,2C,8CC/IXoH,E,KAAc7G,EAAO8G,IAAV,0QAcFD,O,2HCdFE,EAAc/G,IAAO8G,IAAV,+JASXE,EAAQhH,IAAO8G,IAAV,sGACP,qBAAGrF,MAAkB6E,OAAOW,Y,uHCHjCC,EAASlH,IAAOmH,IAAV,mJAMR,qBAAG1F,MAAkBC,aAAaG,MAKhCuF,EAAapH,YAAOwB,KAAPxB,CAAH,iIAmCDqH,IA1B2C,SAAC,GAAwB,IAKlC,EACX,EANuBC,EAAqB,EAArBA,eAC3D,EAA8EC,YAAoBD,GAA1FE,EAAR,EAAQA,SAAeC,EAAvB,EAAkBtJ,IAAiBuJ,EAAnC,EAAmCA,oBAAqBC,EAAxD,EAAwDA,kBAClDC,EAAcJ,GAAY,IAE5BK,EAA4B,cAAC,KAAD,CAAUvG,MAAM,OAAOmF,OAAO,OAAO1F,GAAI,CAAC,MAAO,KAAM,UACnF4G,IAAsBG,IAAYC,UAElCF,GADF,OAAIJ,QAAJ,IAAIA,GAAJ,UAAIA,EAAYO,aAAhB,aAAI,EAAmBC,WACO,cAACf,EAAD,CAAQgB,IAAG,OAAET,QAAF,IAAEA,GAAF,UAAEA,EAAYO,aAAd,aAAE,EAAmBC,YAEhC,cAAC,IAAD,CAAsB3G,MAAM,OAAOmF,OAAO,OAAO1F,GAAI,CAAC,MAAO,KAAM,WAInG,OACE,cAAC,IAAD,CAAMoH,GAAE,UAAKC,IAAL,oBAA4Bd,GAApC,SACE,eAACF,EAAD,WACGS,EACD,eAAC,IAAD,CAAKQ,QAAQ,SAAb,UACE,cAAC,KAAD,CAAMC,WAAW,OAAjB,SAAyBC,YAAajB,KACrCI,IAAwBI,IAAYC,QAAU,cAAC,KAAD,IAAe,cAAC,KAAD,CAAMO,WAAW,OAAjB,SAAyBV,c,0EC5C3FY,EAAWxI,YAAOwB,KAAPxB,CAAH,oDAIRyI,EAAuB,WAC3B,MAAuB3E,eAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAEd,OACE,+BACE,cAAC,KAAD,UACE,cAACwE,EAAD,UACE,cAAC,KAAD,CAAU/B,OAAQ,CAAC,IAAK,KAAM,IAAKnF,MAAO,CAAC,GAAI,KAAM,WAGzD,cAAC,KAAD,UACE,cAACkH,EAAD,CAAUxG,eAAe,WAAzB,SACE,cAAC,KAAD,CAAUyE,OAAQ,CAAC,GAAI,KAAM,IAAKnF,MAAO,SAG5CyC,GAAQC,EAAO,KACd,qCACE,cAAC,KAAD,UACE,cAACwE,EAAD,CAAUxG,eAAe,WAAzB,SACE,cAAC,KAAD,CAAUyE,OAAQ,GAAInF,MAAO,SAGjC,cAAC,KAAD,UACE,cAACkH,EAAD,CAAUxG,eAAe,WAAzB,SACE,cAAC,KAAD,CAAUyE,OAAQ,GAAInF,MAAO,aAKrC,cAAC,KAAD,UACE,cAACkH,EAAD,CAAUxG,eAAe,SAAzB,SACE,cAAC,KAAD,CAAUyE,OAAQ,CAAC,GAAI,KAAM,IAAKnF,MAAO,CAAC,GAAI,KAAM,eAoB/C8E,IAbe,kBAC5B,qCACE,cAACqC,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,IACA,cAACA,EAAD,S,gNCbWC,EAjC6C,SAAC,GAA+B,IAAD,EAA5BlL,EAA4B,EAA5BA,YAAgB8B,EAAY,iBACjFG,EAAMC,cAAND,EAEFkJ,GAAM,mBACT/K,IAAYE,IAAM,CACjB8K,KAAMnJ,EAAE,UACR4B,MAAO,eAHC,cAKTzD,IAAYD,OAAS,CACpBiL,KAAMnJ,EAAE,YACR4B,MAAO,eAPC,cASTzD,IAAYC,OAAS,CACpB+K,KAAMnJ,EAAE,YACR4B,MAAO,eAXC,cAaTzD,IAAYiL,IAAM,CACjBD,KAAMnJ,EAAE,UACR4B,MAAO,YAfC,cAiBTzD,IAAYY,KAAO,CAClBoK,KAAMnJ,EAAE,QACR4B,MAAO,YAnBC,GAuBZ,OACE,cAAC,KAAD,2BAAU/B,GAAV,IAAiB+B,MAAOsH,EAAOnL,GAAa6D,MAA5C,SACGsH,EAAOnL,GAAaoL,SCvBrBE,EAAe9I,YAAO+I,KAAP/I,CAAH,uEAEG,qBAAGyB,MAAkBuH,MAAMC,WAkGjCC,EAtFiC,SAAC,GAO1C,IANL/K,EAMI,EANJA,IACAsE,EAKI,EALJA,SACAmB,EAII,EAJJA,aACAuF,EAGI,EAHJA,gBACAC,EAEI,EAFJA,UAEI,IADJC,sBACI,SACIC,EAAYC,cAAZD,QACA7J,EAAMC,cAAND,EACAgC,EAAUc,cAAVd,MACF+H,EAAeC,WAAWhH,EAASzE,OACnC0L,EAAaC,YAAsB/F,EAAc4F,GAEvD,OACE,cAAC,KAAD,CAAOI,MAAOnK,EAAE,uBAAwB2J,UAAWA,EAAWS,iBAAkBpI,EAAM6E,OAAOwD,UAAUC,WAAvG,SACE,eAAC,KAAD,CAAM9H,cAAc,SAAS+H,SAAS,QAAtC,UACE,eAAC,KAAD,CAAMlJ,WAAW,SAASE,GAAG,OAAOgB,eAAe,gBAAnD,UACE,cAAC8G,EAAD,CAAcZ,IAAK/J,EAAI6J,MAAMC,UAAWxB,OAAQ,GAAInF,MAAO,GAAIP,GAAG,SAClE,eAAC,KAAD,CAAMkB,cAAc,SAApB,UACE,cAAC,KAAD,CAAME,SAAS,OAAOd,MAAM,aAAa0E,UAAU,QAAnD,SACG5H,EAAI8L,iBAEP,cAAC,KAAD,CAAM7H,MAAI,EAAV,SAAYjE,EAAI+L,aAGpB,eAAC,IAAD,CAAetD,EAAE,OAAjB,UACE,eAAC,KAAD,CAAM5F,GAAG,OAAOgB,eAAe,gBAA/B,UACE,cAAC,EAAD,CAAmBG,SAAS,OAAO3E,YAAaiF,EAASjF,cACxDgM,EACC,eAAC,KAAD,CAAMxH,eAAe,WAAWlB,WAAW,SAA3C,UACE,cAAC,IAAD,CAAaQ,MAAM,OAAOmF,OAAO,OAAO1F,GAAG,QAC3C,cAAC,KAAD,CAAMA,GAAG,MAAMqB,MAAI,EAAnB,SACGoH,IAEH,cAAC,KAAD,CAAMnI,MAAM,aAAZ,sBACSqI,EAAWS,oBAAeC,EAAW,CAC1CC,sBAAuB,EACvBC,sBAAuB,IAH3B,UAQF,OAGHjB,EACC,eAAC,KAAD,CAAMrI,GAAG,OAAOgB,eAAe,gBAA/B,UACE,cAAC,KAAD,CAAMG,SAAS,OAAOd,MAAM,aAA5B,SACG5B,EAAE,aAEL,cAAC,KAAD,UAAOgD,EAAS8H,WAAahC,YAAa9F,EAAS8H,YAAc,SAGnE,qCACE,eAAC,KAAD,CAAMvJ,GAAG,OAAOgB,eAAe,gBAA/B,UACE,cAAC,KAAD,CAAMG,SAAS,OAAOd,MAAM,aAA5B,SACG5B,EAAE,UAEL,cAAC,KAAD,UAAOgD,EAASnE,OAASiK,YAAa9F,EAASnE,QAAU,SAE3D,eAAC,KAAD,CAAM0C,GAAG,OAAOgB,eAAe,gBAA/B,UACE,cAAC,KAAD,CAAMG,SAAS,OAAOd,MAAM,aAA5B,SACG5B,EAAE,QAEL,cAAC,KAAD,UAAOgD,EAAShE,MAAQ8J,YAAa9F,EAAShE,OAAS,YAI7D,eAAC,KAAD,CAAMuD,eAAe,gBAArB,UACE,cAAC,KAAD,CAAMG,SAAS,OAAOd,MAAM,aAA5B,SACG5B,EAAE,UAEL,cAAC,KAAD,UAAO0J,UAGX,cAAC,KAAD,CAAMlH,cAAc,SAASuE,GAAG,OAAO1F,WAAW,SAAlD,SACE,cAAC,IAAD,CAAQ0J,GAAIC,KAAMC,UAAQ,EAACC,KAAMC,YAAenI,EAASrE,GAAI,cAAekL,GAA5E,SACG7J,EAAE,6BCpEAoL,EAlCO,SAAC,GAA6B,IAA3BjH,EAA0B,EAA1BA,aAAc5F,EAAY,EAAZA,MAC/B0L,EAAaC,YAAsB/F,EAAc5F,GAEvD,OACE,cAAC,KAAD,CAAMiE,cAAc,SAASnB,WAAW,WAAxC,SACG9C,EACC,qCACE,eAAC,KAAD,CAAM8M,YAAY,aAAahK,WAAW,SAA1C,UACE,cAAC,IAAD,CAAaQ,MAAM,OAAOmF,OAAO,OAAO1F,GAAG,QAC3C,cAAC,KAAD,CAAMiJ,SAAS,OAAO5H,MAAI,EAA1B,SACGpE,EAAMmM,oBAAeC,EAAW,CAC/BC,sBAAuB,EACvBC,sBAAuB,SAI5BZ,EACC,cAAC,KAAD,CAAMvH,SAAS,OAAOd,MAAM,aAA5B,sBACSqI,EAAWS,oBAAeC,EAAW,CAC1CC,sBAAuB,EACvBC,sBAAuB,IAH3B,OAOA,cAAC,KAAD,CAAU7D,OAAO,OAAOnF,MAAM,YAIlC,O,SCPFwH,EAAe9I,YAAO+I,KAAP/I,CAAH,uEAEG,qBAAGyB,MAAkBuH,MAAMC,WAwIjC9C,IA5HiC,SAAC,GAM1C,IAAD,EALJ1D,EAKI,EALJA,SACAmB,EAII,EAJJA,aACAzF,EAGI,EAHJA,IAGI,IAFJkL,sBAEI,aADJ0B,qBACI,SACIzB,EAAYC,cAAZD,QACR,EAAuBxF,eAAfC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KACRwF,EAAeC,WAAWhH,EAASzE,OACnCgN,EAAiD,IAAjCvB,WAAWhH,EAASvE,WACpCiL,EAAkB,IAAI8B,KAAKD,GAAeb,oBAAeC,EAAW,CACxEc,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YAEV,EAA+BC,aAC7B,cAAC,EAAD,CACEpN,IAAKA,EACLsE,SAAUA,EACV0G,gBAAiBA,EACjBvF,aAAcA,EACdyF,eAAgBA,KANbmC,EAAP,oBASMC,IAAiBtN,GAAMA,EAAIkB,kBAAkBqF,gBAAkBgH,IAAsBhH,cACrFU,EACJjH,GAAOsN,EAAP,UACItN,EAAIwN,WAAW1F,MAAK,SAAC2F,GAAD,MAAuC,YAAxBA,EAAUC,oBADjD,aACI,EAAuEC,MACvE3N,EACAA,EAAIiH,QACJ,KAEN,OACE,gDAAUrB,GAAQC,IAAS,CAAEnE,QAAS2L,IAAtC,cACIT,EAmCE,KAlCF,cAAC,KAAD,4BACQhH,GAAQC,IAAS,CACrBnE,QAAS,SAACkM,GACRA,EAAMC,qBAHZ,aAOE,eAAC,KAAD,CAAMhK,eAAe,aAAalB,WAAW,SAASmB,cAAe,CAAC,SAAU,KAAM,OAAtF,UACE,cAAC,IAAD,CAAKX,MAAO,GAAImF,OAAQ,GAAI1F,GAAI,CAAC,EAAG,KAAM,QAASC,GAAI,CAAC,MAAO,KAAM,GAArE,SACE,cAAC,IAAD,CAAYmH,GAAIhK,EAAG,UAAMiK,IAAN,wBAAiCjK,EAAIkB,kBAArC,YAA0D+F,GAA1D,GAAnB,SACE,cAAC,EAAD,CAAc8C,IAAG,OAAE/J,QAAF,IAAEA,OAAF,EAAEA,EAAK6J,MAAMC,UAAWgE,IAAG,OAAE9N,QAAF,IAAEA,OAAF,EAAEA,EAAK+L,KAAM5I,MAAO,GAAImF,OAAQ,SAGhF,eAAC,KAAD,CAAMxE,cAAc,SAApB,UACE,cAAC,KAAD,CACEuI,GAAI0B,IACJ/D,GAAIhK,EAAG,UAAMiK,IAAN,wBAAiCjK,EAAIkB,mBAArC,GACP0G,UAAW,CAAC,SAAU,KAAM,QAC5B1E,MAAM,aACNc,SAAS,OALX,gBAOGhE,QAPH,IAOGA,OAPH,EAOGA,EAAK8L,iBAER,cAAC,KAAD,CACEO,GAAI0B,IACJ/D,GAAIhK,EAAG,UAAMiK,IAAN,wBAAiCjK,EAAIkB,kBAArC,YAA0D+F,GAA1D,GACPW,UAAW,CAAC,SAAU,KAAM,QAC5B3D,MAAI,EAJN,gBAMGjE,QANH,IAMGA,OANH,EAMGA,EAAK+L,gBAMhB,eAAC,KAAD,WACE,cAAC,KAAD,CAAMpJ,WAAW,SAASkB,eAAe,WAAzC,SACE,cAAC,EAAD,CAAmBxE,YAAaiF,EAASjF,gBAE1CuG,GAAQC,EAAO,cAAC,EAAD,CAAehG,MAAOwL,EAAc5F,aAAcA,IAAmB,QAEtFG,GAAQC,EAAO,KACd,qCACE,cAAC,KAAD,UACE,cAAC,EAAD,CAAehG,MAAOwL,EAAc5F,aAAcA,MAEnDyF,EACC,cAAC,KAAD,UACE,cAAC,KAAD,CAAMrH,eAAe,SAASlB,WAAW,SAAzC,SACG2B,EAAS8H,WAAa,cAAClD,EAAA,EAAD,CAAaC,eAAgB7E,EAAS8H,aAAiB,QAIlF,qCACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAMvI,eAAe,SAASlB,WAAW,SAAzC,SACG2B,EAASnE,OAAS,cAAC+I,EAAA,EAAD,CAAaC,eAAgB7E,EAASnE,SAAa,QAG1E,cAAC,KAAD,UACE,cAAC,KAAD,CAAM0D,eAAe,SAASlB,WAAW,SAAzC,SACG2B,EAAShE,MAAQ,cAAC4I,EAAA,EAAD,CAAaC,eAAgB7E,EAAShE,QAAY,cAOhF,cAAC,KAAD,UACE,cAAC,KAAD,CAAMuD,eAAe,SAArB,SACE,cAAC,KAAD,CAAM+D,UAAU,SAAS5D,SAAU4B,GAAQC,EAAO,OAAS,OAA3D,SACGmF,QAINpF,GAAQC,EAAO,KACd,cAAC,KAAD,UACE,cAAC,KAAD,CAAYwG,GAAIC,KAAMC,UAAQ,EAACC,KAAMC,YAAenI,EAASrE,GAAI,cAAekL,GAAhF,SACE,cAAC,KAAD,CAAajI,MAAM,aAAaC,MAAM","file":"static/js/6.a1b916be.chunk.js","sourcesContent":["import { ethers } from 'ethers'\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\n\nexport const sortActivity = ({\n  askOrders = [],\n  transactions = [],\n}: {\n  askOrders?: AskOrder[]\n  transactions?: Transaction[]\n}): Activity[] => {\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\n      const marketEvent = MarketEvent.SELL\n      const { timestamp, nft } = transactionHistory\n      const price = transactionHistory.askPrice\n      const tx = transactionHistory.id\n      const buyer = transactionHistory.buyer.id\n      const seller = transactionHistory.seller.id\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\n      const price = askOrderHistory.askPrice\n      const { timestamp, nft } = askOrderHistory\n      const tx = askOrderHistory.id\n      const seller = askOrderHistory?.seller.id\n      return { marketEvent, price, timestamp, nft, tx, seller }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React from 'react'\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { removeAllActivityFilters } from 'state/nftMarket/reducer'\n\ninterface ClearAllButtonProps extends ButtonProps {\n  collectionAddress: string\n}\n\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const clearAll = () => {\n    dispatch(removeAllActivityFilters(collectionAddress))\n  }\n\n  return (\n    <Button key=\"clear-all\" variant=\"text\" scale=\"sm\" onClick={clearAll} {...props}>\n      {t('Clear')}\n    </Button>\n  )\n}\n\nexport default ClearAllButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Button, Flex, IconButton, CloseIcon } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { addActivityTypeFilters, removeActivityTypeFilters } from 'state/nftMarket/reducer'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../state/nftMarket/types'\n\ninterface ActivityFilterProps {\n  eventType: MarketEvent\n  collectionAddress: string\n}\n\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\n  ${({ hasItem }) =>\n    hasItem &&\n    `  \n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: 8px;\n  `}\n`\n\nconst CloseButton = styled(IconButton)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`\n\nconst eventName = (t: ContextApi['t'], eventType: string) => {\n  switch (eventType) {\n    case MarketEvent.CANCEL:\n      return t('Delisted')\n    case MarketEvent.MODIFY:\n      return t('Modified')\n    case MarketEvent.NEW:\n      return t('Listed')\n    case MarketEvent.SELL:\n      return t('Sold')\n    default:\n      return ''\n  }\n}\n\nexport const ActivityFilter: React.FC<ActivityFilterProps> = ({ eventType, collectionAddress }) => {\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n\n  const isEventSelected = nftActivityFilters.typeFilters.some((nftActivityFilter) => nftActivityFilter === eventType)\n\n  const handleMenuClick = () => {\n    if (!isEventSelected) {\n      dispatch(addActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n    }\n  }\n\n  const handleClearItem = () => {\n    dispatch(removeActivityTypeFilters({ collection: collectionAddress, field: eventType }))\n  }\n\n  return (\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\n      <Box>\n        <TriggerButton\n          onClick={handleMenuClick}\n          variant={isEventSelected ? 'subtle' : 'light'}\n          scale=\"sm\"\n          hasItem={isEventSelected}\n        >\n          {eventName(t, eventType)}\n        </TriggerButton>\n      </Box>\n      {isEventSelected && (\n        <CloseButton variant={isEventSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearItem}>\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\n        </CloseButton>\n      )}\n    </Flex>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Collection, MarketEvent } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport ClearAllButton from './ClearAllButton'\nimport { ActivityFilter } from './ActivityFilter'\n\nexport const Container = styled(Flex)`\n  gap: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    align-items: center;\n    flex-grow: 2;\n  }\n`\n\nconst ScrollableFlexContainer = styled(Flex)`\n  align-items: center;\n  flex: 1;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-wrap: wrap;\n    overflow-x: revert;\n  }\n`\n\ninterface FiltersProps {\n  collection: Collection\n}\n\nconst ActivityFilters: React.FC<FiltersProps> = ({ collection }) => {\n  const { address } = collection || { address: '' }\n  const { t } = useTranslation()\n\n  const nftActivityFilters = useGetNftActivityFilters(address)\n\n  return (\n    <Container justifyContent=\"space-between\" flexDirection={['column', 'column', 'row']}>\n      <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\n        {t('Filter by')}\n      </Text>\n      <ScrollableFlexContainer>\n        {[MarketEvent.NEW, MarketEvent.CANCEL, MarketEvent.MODIFY, MarketEvent.SELL].map((eventType) => {\n          return <ActivityFilter key={eventType} eventType={eventType} collectionAddress={address} />\n        })}\n      </ScrollableFlexContainer>\n      {!isEmpty(nftActivityFilters.typeFilters) ? <ClearAllButton collectionAddress={address} /> : null}\n    </Container>\n  )\n}\n\nexport default ActivityFilters\n","import React, { useEffect, useState } from 'react'\nimport { uniqBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Flex,\n  Table,\n  Text,\n  Th,\n  useMatchBreakpoints,\n} from '@pancakeswap/uikit'\nimport { getCollectionActivity, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport Container from 'components/Layout/Container'\nimport TableLoader from 'components/TableLoader'\nimport { Activity, Collection, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\nimport { Arrow, PageButtons } from '../components/PaginationButtons'\nimport NoNftsImage from '../components/Activity/NoNftsImage'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityRow from '../components/Activity/ActivityRow'\nimport { sortActivity } from './utils/sortActivity'\n\nconst MAX_PER_PAGE = 8\n\nconst MAX_PER_QUERY = 100\n\ninterface ActivityHistoryProps {\n  collection?: Collection\n}\n\nconst ActivityHistory: React.FC<ActivityHistoryProps> = ({ collection }) => {\n  const dispatch = useAppDispatch()\n  const { address: collectionAddress } = collection || { address: '' }\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [paginationData, setPaginationData] = useState<{\n    activity: Activity[]\n    currentPage: number\n    maxPage: number\n  }>({\n    activity: [],\n    currentPage: 1,\n    maxPage: 1,\n  })\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isInitialized, setIsInitialized] = useState(false)\n  const [queryPage, setQueryPage] = useState(1)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  const nftActivityFiltersString = JSON.stringify(nftActivityFilters)\n\n  useEffect(() => {\n    const fetchCollectionActivity = async () => {\n      try {\n        setIsLoading(true)\n        const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n        const collectionActivity = await getCollectionActivity(\n          collectionAddress.toLowerCase(),\n          nftActivityFiltersParsed,\n          MAX_PER_QUERY,\n        )\n        const activity = sortActivity(collectionActivity)\n        setPaginationData({\n          activity,\n          currentPage: 1,\n          maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n        })\n        setIsLoading(false)\n        setIsInitialized(true)\n      } catch (error) {\n        console.error('Failed to fetch collection activity', error)\n      }\n    }\n\n    if ((collectionAddress && isAddress(collectionAddress)) || collectionAddress === '') {\n      fetchCollectionActivity()\n    }\n  }, [dispatch, collectionAddress, nftActivityFiltersString, lastUpdated])\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        activitiesSlice.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    if (activitiesSlice.length > 0) {\n      fetchActivityNftMetadata()\n    }\n  }, [activitiesSlice])\n\n  useEffect(() => {\n    const slice = paginationData.activity.slice(\n      MAX_PER_PAGE * (paginationData.currentPage - 1),\n      MAX_PER_PAGE * paginationData.currentPage,\n    )\n    setActivitiesSlice(slice)\n  }, [paginationData])\n\n  return (\n    <Box py=\"32px\">\n      <Container px={[0, null, '24px']}>\n        <Flex\n          style={{ gap: '16px', padding: '0 16px' }}\n          alignItems={[null, null, 'center']}\n          flexDirection={['column', 'column', 'row']}\n        >\n          <ActivityFilters collection={collection} />\n          <Button\n            scale=\"sm\"\n            disabled={isLoading}\n            onClick={() => {\n              refresh()\n            }}\n          >\n            {t('Refresh')}\n          </Button>\n        </Flex>\n      </Container>\n      <Container style={{ overflowX: 'auto' }}>\n        {paginationData.activity.length === 0 &&\n        nftMetadata.length === 0 &&\n        activitiesSlice.length === 0 &&\n        !isLoading ? (\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text pt=\"8px\" bold>\n              {t('No NFT market history found')}\n            </Text>\n          </Flex>\n        ) : (\n          <>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                  <Th textAlign=\"right\"> {t('Event')}</Th>\n                  {isXs || isSm ? null : (\n                    <>\n                      <Th textAlign=\"right\"> {t('Price')}</Th>\n                      <Th textAlign=\"center\"> {t('From')}</Th>\n                      <Th textAlign=\"center\"> {t('To')}</Th>\n                    </>\n                  )}\n                  <Th textAlign=\"center\"> {t('Date')}</Th>\n                  {isXs || isSm ? null : <Th />}\n                </tr>\n              </thead>\n\n              <tbody>\n                {!isInitialized ? (\n                  <TableLoader />\n                ) : (\n                  activitiesSlice.map((activity) => {\n                    const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                    return (\n                      <ActivityRow\n                        key={`${activity.marketEvent}#${activity.nft.tokenId}#${activity.timestamp}#${activity.tx}`}\n                        activity={activity}\n                        nft={nftMeta}\n                        bnbBusdPrice={bnbBusdPrice}\n                      />\n                    )\n                  })\n                )}\n              </tbody>\n            </Table>\n            <Flex\n              borderTop={`1px ${theme.colors.cardBorder} solid`}\n              pt=\"24px\"\n              flexDirection=\"column\"\n              justifyContent=\"space-between\"\n              height=\"100%\"\n            >\n              <PageButtons>\n                <Arrow\n                  onClick={() => {\n                    if (paginationData.currentPage !== 1) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage - 1,\n                      }))\n                    }\n                  }}\n                >\n                  <ArrowBackIcon color={paginationData.currentPage === 1 ? 'textDisabled' : 'primary'} />\n                </Arrow>\n                <Text>\n                  {t('Page %page% of %maxPage%', {\n                    page: paginationData.currentPage,\n                    maxPage: paginationData.maxPage,\n                  })}\n                </Text>\n                <Arrow\n                  onClick={async () => {\n                    if (paginationData.currentPage !== paginationData.maxPage) {\n                      setPaginationData((prevState) => ({\n                        ...prevState,\n                        currentPage: prevState.currentPage + 1,\n                      }))\n\n                      if (\n                        paginationData.maxPage - paginationData.currentPage === 1 &&\n                        paginationData.activity.length === MAX_PER_QUERY * queryPage\n                      ) {\n                        try {\n                          setIsLoading(true)\n                          const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\n                          const collectionActivity = await getCollectionActivity(\n                            collectionAddress.toLowerCase(),\n                            nftActivityFiltersParsed,\n                            MAX_PER_QUERY * (queryPage + 1),\n                          )\n                          const activity = sortActivity(collectionActivity)\n                          setPaginationData((prevState) => {\n                            return {\n                              ...prevState,\n                              activity,\n                              maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\n                            }\n                          })\n                          setIsLoading(false)\n                          setQueryPage((prevState) => prevState + 1)\n                        } catch (error) {\n                          console.error('Failed to fetch collection activity', error)\n                        }\n                      }\n                    }\n                  }}\n                >\n                  <ArrowForwardIcon\n                    color={paginationData.currentPage === paginationData.maxPage ? 'textDisabled' : 'primary'}\n                  />\n                </Arrow>\n              </PageButtons>\n            </Flex>\n          </>\n        )}\n      </Container>\n    </Box>\n  )\n}\n\nexport default ActivityHistory\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import styled from 'styled-components'\n\nexport const PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nexport const Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { FetchStatus } from 'config/constants/types'\nimport { useGetProfileAvatar } from 'state/profile/hooks'\nimport { Link } from 'react-router-dom'\nimport { nftsBaseUrl } from '../constants'\n\nconst Avatar = styled.img`\n  margin-right: 4px;\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-right: 12px;\n  }\n`\n\nconst StyledFlex = styled(Flex)`\n  align-items: center;\n  transition: opacity 200ms ease-in;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\n  const profileName = username || '-'\n\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n  if (avatarFetchStatus === FetchStatus.Fetched) {\n    if (profileNft?.image?.thumbnail) {\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\n    } else {\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\n    }\n  }\n\n  return (\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\n      <StyledFlex>\n        {sellerProfilePicComponent}\n        <Box display=\"inline\">\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\n          {usernameFetchStatus !== FetchStatus.Fetched ? <Skeleton /> : <Text lineHeight=\"1.25\">{profileName}</Text>}\n        </Box>\n      </StyledFlex>\n    </Link>\n  )\n}\n\nexport default ProfileCell\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n  isUserActivity?: boolean\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({\n  nft,\n  activity,\n  bnbBusdPrice,\n  localeTimestamp,\n  onDismiss,\n  isUserActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })})`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          {isUserActivity ? (\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('From/To')}\n              </Text>\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n            </Flex>\n          ) : (\n            <>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('From')}\n                </Text>\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\n              </Flex>\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">\n                  {t('To')}\n                </Text>\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\n              </Flex>\n            </>\n          )}\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          {priceInUsd ? (\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`(~$${priceInUsd.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2,\n              })})`}\n            </Text>\n          ) : (\n            <Skeleton height=\"18px\" width=\"42px\" />\n          )}\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport {\n  Image,\n  Flex,\n  Text,\n  Td,\n  IconButton,\n  Link,\n  OpenNewIcon,\n  useMatchBreakpoints,\n  useModal,\n  Box,\n} from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { Activity, NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport MobileModal from './MobileModal'\nimport ActivityPrice from './ActivityPrice'\nimport ActivityEventText from './ActivityEventText'\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  isUserActivity?: boolean\n  isNftActivity?: boolean\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({\n  activity,\n  bnbBusdPrice,\n  nft,\n  isUserActivity = false,\n  isNftActivity = false,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal\n      nft={nft}\n      activity={activity}\n      localeTimestamp={localeTimestamp}\n      bnbBusdPrice={bnbBusdPrice}\n      isUserActivity={isUserActivity}\n    />,\n  )\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\n  const tokenId =\n    nft && isPBCollection\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\n      : nft\n      ? nft.tokenId\n      : null\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      {!isNftActivity ? (\n        <Td\n          {...((isXs || isSm) && {\n            onClick: (event) => {\n              event.stopPropagation()\n            },\n          })}\n        >\n          <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n            <Box width={64} height={64} mr={[0, null, '16px']} mb={['8px', null, 0]}>\n              <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\n                <RoundedImage src={nft?.image.thumbnail} alt={nft?.name} width={64} height={64} />\n              </RouterLink>\n            </Box>\n            <Flex flexDirection=\"column\">\n              <Text\n                as={RouterLink}\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}` : ``}\n                textAlign={['center', null, 'left']}\n                color=\"textSubtle\"\n                fontSize=\"14px\"\n              >\n                {nft?.collectionName}\n              </Text>\n              <Text\n                as={RouterLink}\n                to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}\n                textAlign={['center', null, 'left']}\n                bold\n              >\n                {nft?.name}\n              </Text>\n            </Flex>\n          </Flex>\n        </Td>\n      ) : null}\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          {isUserActivity ? (\n            <Td>\n              <Flex justifyContent=\"center\" alignItems=\"center\">\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n              </Flex>\n            </Td>\n          ) : (\n            <>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\n                </Flex>\n              </Td>\n              <Td>\n                <Flex justifyContent=\"center\" alignItems=\"center\">\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\n                </Flex>\n              </Td>\n            </>\n          )}\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n"],"sourceRoot":""}