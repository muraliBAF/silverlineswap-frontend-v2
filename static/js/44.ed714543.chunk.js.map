{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","secondary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","useApproveFarm","lpContract","masterChefContract","useMasterchef","callWithGasPrice","useCallWithGasPrice","onApprove","useCallback","a","ethers","constants","MaxUint256","tx","wait","receipt","status","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","pid","account","useWeb3React","useToast","toastSuccess","toastError","useState","pendingTx","setPendingTx","cakePrice","usePriceCakeBusd","dispatch","useAppDispatch","rawEarningsBalance","getBalanceAmount","BIG_ZERO","displayBalance","toFixed","BigNumber","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","Balance","fontSize","decimals","value","unit","prefix","disabled","eq","logError","fetchFarmUserDataAsync","pids","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","backgroundAlt","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceUnits","parseUnits","formatBigNumber","pattern","inputMode","step","min","placeholder","scale","mr","bold","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","val","setVal","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","Number","isFinite","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","console","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","useLpTokenPrice","handleStake","handleUnstake","stakedBalanceBigNumber","lt","useModal","onPresentDeposit","onPresentWithdraw","getBalanceNumber","some","item","pathname","includes","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","ActionContainer","input","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","borderRadius","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","isComingSoon","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","farmsCurrentlyVisible","rowData","ComingSoon","PageHeader","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/44.ed714543.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.secondary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"secondary\">\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal color='contrast' href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal color='contrast' href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal color='contrast' href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {multiplier ? (\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n          ) : (\n            <Skeleton ml=\"4px\" width={42} height={28} />\n          )}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport React, { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color='text'>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'SLCT' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            logError(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { formatBigNumber } from 'utils/formatBalance'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.backgroundAlt};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n\n    const balanceUnits = parseUnits(balance, decimals)\n    return formatBigNumber(balanceUnits, decimals, decimals)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton, Skeleton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport { logError } from 'utils/sentry'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        {Number.isFinite(annualRoi) ? (\n          <AnnualRoiContainer\n            alignItems=\"center\"\n            onClick={() => {\n              setShowRoiCalculator(true)\n            }}\n          >\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        ) : (\n          <Skeleton width={60} />\n        )}\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              logError(e)\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { logError } from 'utils/sentry'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              logError(e)\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { Button, Flex, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport React, { useCallback, useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { logError } from 'utils/sentry'\nimport useApproveFarm from '../../hooks/useApproveFarm'\nimport HarvestAction from './HarvestAction'\nimport StakeAction from './StakeAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      logError(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          SLCT\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('SLCT + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'SLCT'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold color=\"contrast\" style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text color=\"contrast\" bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of SLCT rewards each farm receives, as a proportion of the SLCT produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 SLCT per block, a 40x farm would receive 40 SLCT per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport React, { useState } from 'react'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          SLCT\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'SLCT' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              logError(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import { AddIcon, Button, Heading, IconButton, MinusIcon, Skeleton, Text, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport React, { useCallback, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport styled from 'styled-components'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { logError } from 'utils/sentry'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionContent, ActionTitles } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      logError(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"primary\">\n        <ButtonMenuItem style={{borderRadius:'20px'}} as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem style={{borderRadius:'20px'}} id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport ComingSoon from 'views/Teams/components/ComingSoon'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px 40px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived);\n\n  const [isComingSoon, setIsComingSoon] = useState(true)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n  if(isComingSoon) return <Flex width=\"100%\" height=\"100%\" justifyContent=\"center\"><ComingSoon/></Flex>\n  \n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"md\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        {/* <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\n          <Button p=\"0\" variant=\"text\">\n            <Text color=\"text\" fontSize=\"16px\" mt=\"10px\">\n              {t('Community Auctions')}\n            </Text>\n          </Button>\n        </NavLink> */}\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}