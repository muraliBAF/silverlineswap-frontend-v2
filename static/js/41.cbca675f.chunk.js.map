{"version":3,"sources":["views/Predictions/components/History/Header.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/components/ChainlinkChartDisclaimer.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/components/Container.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/v1/helpers.ts","views/Predictions/components/v1/NothingToClaimModal.tsx","views/Predictions/components/v1/V1ClaimCheck.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","utils/formatInfoNumbers.ts","components/PairPriceDisplay.tsx","views/Predictions/components/ChainlinkChart.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/index.tsx","components/TabToggle/index.tsx"],"names":["HistoryTabs","Ul","styled","ul","theme","colors","textSubtle","ChartDisclaimer","onDismiss","useUserPredictionChartDisclaimerShow","showDisclaimer","setShowDisclaimer","t","useTranslation","minWidth","p","maxWidth","justifyContent","mb","src","width","height","as","size","fontSize","color","href","external","onClick","htmlFor","style","display","cursor","marginBottom","alignItems","flex","id","scale","checked","onChange","ml","useUserPredictionChainlinkChartDisclaimerShow","my","variant","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","div","mediaQueries","md","Popup","secondary","CollectWinningsPopup","useState","isOpen","setIsOpen","ref","useRef","timer","account","useWeb3React","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","dispatch","useAppDispatch","useEffect","isCancelled","current","setInterval","a","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","clearInterval","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","alt","setHistoryPaneState","Container","GradientModalHeader","ModalHeader","gradients","bubblegum","RiskDisclaimer","onSuccess","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","title","maxHeight","overflowY","disabled","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","TradingView","symbol","Card","CardWrapper","BunnyDecoration","Notification","ErrorNotification","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","isClaimSLN","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","callWithGasPrice","useCallWithGasPrice","predictionsContract","usePredictionsContract","bnbBusdPrice","useBNBBusdPrice","isLoadingHistory","useGetIsFetchingHistory","history","useGetHistory","reduce","accum","claimedSln","expired","betPayout","closePrice","REWARD_RATE","epochs","epoch","calculateClaimableRounds","totalBnb","multiplyPriceByAmount","fetchNodeHistory","handleClick","tx","wait","receipt","markAsCollectedSln","markAsCollected","Toast","txHash","transactionHash","console","error","logError","data","message","mt","margin","textAlign","toFixed","rounds","join","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","ReclaimPositionButton","hasExpired","handleReclaim","status","MIN_PRICE_USD_DISPLAYED","BigNumber","from","MIN_PRICE_BNB_DISPLAYED","formatUsdv2","price","minPriceDisplayed","unitPrefix","decimals","signedPriceToFormat","mul","formatBigNumberToFixed","formatPriceDifference","formatBnbv2","sign","isNegative","abs","lt","formatPriceDifference1","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","seconds","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierV2","ethers","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPriceDifference","lockPrice","sub","getRoundPosition","TIE","gt","BEAR","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","textTransform","PositionTag","betPosition","isUpPosition","useTooltip","bold","placement","targetRef","tooltip","tooltipVisible","fontWeight","getPrizePoolAmount","Row","PrizePoolRow","PayoutRow","positionLabel","formattedMultiplier","lineHeight","mx","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","failure","textDisabled","cardBorder","StyledRoundResultBox","RoundResultBox","RoundPrice","priceDifference","getTextColor","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","isPositionUp","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","ledger","fetchRefundableStatus","StyledBetResult","Divider","hr","BetResult","result","canClaim","useGetIsClaimable","fee","isWinner","Result","WIN","totalPayout","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchLedgerData","mr","getHeaderText","getHeaderIcon","claimedHash","getBscScanLink","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","closeBlock","StyledBet","attrs","card","background","StyledBetWrap","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","canClaimSln","useGetIsClaimableSLN","isExpired","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","flexDirection","marginLeft","pt","pr","Filter","label","StyledHeader","ButtonMenuContainer","Header","activeTab","setActiveTab","historyFilter","useGetHistoryFilter","isFetchingHistory","handleChange","newFilter","setHistoryFilter","switchTab","tabIndex","HistoryFilter","ALL","activeIndex","onItemClick","ROUNDS","flexWrap","COLLECTEDBNB","UNCOLLECTEDBNB","COLLECTEDSLN","UNCOLLECTEDSLN","getV1History","skip","where","request","GRAPH_API_PREDICTION_V1","gql","response","getAllV1History","Promise","resolve","reject","getHistoryChunk","betHistory","flatten","Object","values","isFetching","setIsFetching","setHistory","fetchAllHistory","header","rows","hash","totalBets","anchor","document","createElement","blob","Blob","type","URL","createObjectURL","target","download","body","appendChild","click","removeChild","StyledClaimCheck","ClaimCheck","NothingToClaimModal","onPresentNothingToClaimModal","Loading","RoundsTab","hasBetHistory","hasHistoryLoaded","useGetHasHistoryLoaded","currentHistoryPage","useGetCurrentHistoryPage","V1ClaimCheck","orderBy","map","page","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","amountInUsd","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","netResultInUsd","avgBnbWonInUsd","betRoundInUsd","avgPositionEnteredInUsd","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","results","getFilteredBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","useTheme","transform","RoundMultiplierUpArrow","EnteredTag","isUpTag","whiteSpace","outline","ArrowWrapper","Content","EnteredTagWrapper","fallback","isDisabled","isHouse","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","top","bottom","right","paddingTop","left","paddingBottom","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","bufferSeconds","useGetBufferSeconds","hasRoundFailed","RoundProgress","lockTimestamp","startMs","endMs","rawProgress","progress","BarWrap","Bar","LiveRoundCard","useGetLastOraclePrice","isBull","priceColor","priceAsNumber","parseFloat","useCountUp","start","end","duration","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","maxBalance","useMemo","balanceDisplay","formatBigNumber","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","mulUnsafe","formatFixedNumber","minBetAmountBalance","lte","key","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","toUnsafeFloat","backgroundColor","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","className","percentShortcut","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","getNow","Math","floor","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","useCallback","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","intervalSeconds","useGetIntervalSeconds","startTimestamp","countdown","RoundCard","useGetBetByEpoch","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","ClosingTitle","sm","Price","Interval","Label","shadows","level1","dir","radii","TimerImg","img","PricePairLabel","TimerLabel","interval","unit","currentRoundLockTimestamp","useGetCurrentRoundLockTimestamp","StyledPrevNextNav","default","PrevNextNav","useGetSortedRounds","slidePrev","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","LeaderboardButtonWrapper","ButtonWrapper","Menu","rel","Link","to","order","useOnNextRound","previousEpoch","usePreviousValue","currentEpochIndex","findIndex","slideTo","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","overflow","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","mousewheel","keyboard","resizeObserver","formatAmount","options","notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","numeral","formatOptions","TextLabel","PairPriceDisplay","inputSymbol","outputSymbol","useChainlinkRoundDataSet","lastRound","chainlinkOracleContract","useChainlinkOracleContract","useSWRContract","dedupingInterval","refreshInterval","compare","b","useChainlinkLatestRound","chainlinkOracleAddress","getChainlinkOracleAddress","calls","Array","_","i","address","params","useSWRMulticall","chainlinkOracleAbi","laggyMiddleware","d","answer","startedAt","toNumber","HoverUpdater","payload","mutate","useChartHoverMutate","useSWRConfig","PageView","chartColor","ChainlinkChartWrapper","HoverData","hoverData","useSWRImmutable","locale","currentLanguage","columnGap","gap","year","day","month","hour","minute","Chart","isDark","ResponsiveContainer","AreaChart","onMouseLeave","x1","y1","x2","y2","stopColor","stopOpacity","XAxis","dataKey","tickFormatter","time","hourCycle","text","minTickGap","reversed","tick","fill","hide","YAxis","tickCount","domain","orientation","dx","Tooltip","stroke","strokeDasharray","contentStyle","formatter","__","Area","strokeWidth","activeDot","dot","Dot","gold","fillOpacity","ActiveDot","sortedRounds","primary","roundIndex","closeOracleId","el","dispatchEvent","Event","ChainLinkChart","useGetRoundsByCloseOracleId","ExpandButtonGroup","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","isChartPaneOpen","PageHeader","Desktop","splitWrapperRef","chartRef","gutterRef","useIsChartPaneOpen","chartView","useChartView","splitInstance","getBoundingClientRect","setChartPaneState","handleDrag","debounce","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","backgroundImage","ERROR","PAUSED","transition","gridTemplateRows","delay","TabToggle","Button","PredictionsChartView","onMouseDown","e","stopPropagation","preventDefault","setChartView","Chainlink","useGetLatestOraclePrice","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","contract","getChainlinkOracleContract","latestAnswer","fetchPrice","usePollOraclePrice","setLastOraclePrice","toJSON","usePollPredictions","earliestEpoch","useGetEarliestEpoch","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","isMobile","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","Predictions","isDesktop","useMatchBreakpoints","useUserPredictionAcceptedRisk","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","ChainlinkChartDisclaimer","onPresentChainlinkChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","onPresentChainlinkChartDisclaimerRef","initializePredictions","PageLoader","Page","button","TabToggleGroup"],"mappings":"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","file":"static/js/41.cbca675f.chunk.js","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n  BinanceIcon,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n  margin-bottom:16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  margin-bottom: 16px;\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\" flexWrap='wrap'>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTEDBNB}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTEDBNB)}\n              />\n              <Text ml=\"4px\"><Flex>{t('Collected')} <BinanceIcon ml=\"4px\"/> </Flex></Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTEDBNB}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTEDBNB)}\n              />\n              <Text ml=\"4px\"><Flex>{t('Uncollected')} <BinanceIcon ml=\"4px\"/> </Flex></Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTEDSLN}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTEDSLN)}\n              />\n              <Text ml=\"4px\"><Flex alignItems=\"center\" >{t('Collected')}<img src='/images/tokens/sln.png' style={{marginLeft:'4px', width:'20px', height:'20px'}} alt='token'/></Flex></Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTEDSLN}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTEDSLN)}\n              />\n              <Text ml=\"4px\"><Flex alignItems=\"center\" >{t('Uncollected')}<img src='/images/tokens/sln.png' style={{marginLeft:'4px', width:'20px', height:'20px'}} alt='token'/></Flex></Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  InjectedModalProps,\n  LinkExternal,\n  Flex,\n  Image,\n  Heading,\n  Checkbox,\n  Box,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserPredictionChartDisclaimerShow } from 'state/user/hooks'\n\nconst Ul = styled.ul`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  list-style-position: outside;\n  margin-left: 16px;\n\n  & > li {\n    font-size: 14px;\n    line-height: 1.5;\n  }\n`\n\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showDisclaimer, setShowDisclaimer] = useUserPredictionChartDisclaimerShow()\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Flex justifyContent=\"center\" mb=\"32px\">\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\n        </Flex>\n        <Heading as=\"h3\" size=\"sm\">\n          {t('Warning')}:\n        </Heading>\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\n          {t('Prices shown on cards and charts are different')}:\n        </Heading>\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\n          {t('The price you see come from difference places')}:\n        </Text>\n        <Ul>\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\n        </Ul>\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\n        </Text>\n        <LinkExternal\n          href=\"https://docs.silverlineswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n          external\n          mb=\"24px\"\n        >\n          {t('Learn More')}\n        </LinkExternal>\n        <Box>\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n            {t('I understand')}\n          </Button>\n        </Box>\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n          <Flex alignItems=\"center\">\n            <div style={{ flex: 'none' }}>\n              <Checkbox\n                id=\"checkbox\"\n                scale=\"sm\"\n                checked={!showDisclaimer}\n                onChange={() => setShowDisclaimer(!showDisclaimer)}\n              />\n            </div>\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\n          </Flex>\n        </label>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { FC } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  InjectedModalProps,\n  Flex,\n  Image,\n  Heading,\n  Checkbox,\n  Box,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserPredictionChainlinkChartDisclaimerShow } from 'state/user/hooks'\n\nconst Ul = styled.ul`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  list-style-position: outside;\n  margin-left: 16px;\n\n  & > li {\n    font-size: 14px;\n    line-height: 1.5;\n  }\n`\n\nconst ChartDisclaimer: FC<React.PropsWithChildren<InjectedModalProps>> = ({ onDismiss }) => {\n  const [showDisclaimer, setShowDisclaimer] = useUserPredictionChainlinkChartDisclaimerShow()\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Flex justifyContent=\"center\" mb=\"32px\">\n          <Image src=\"/images/chartwarning2.svg\" width={190} height={118} />\n        </Flex>\n        <Heading as=\"h3\" size=\"sm\">\n          {t('Currently showing charts from Chainlink oracle')}\n        </Heading>\n        <Text color=\"textSubtle\" fontSize=\"14px\" my=\"24px\">\n          {t('The price you see come directly from the Chainlink oracle, which powers the Prediction game.')}\n        </Text>\n        <Ul>\n          <li>{t('Oracle price refreshes every ~20 seconds.')}</li>\n          <li>{t('When compared to TradingView chart. This chart refreshes slower and with fewer features.')}</li>\n        </Ul>\n        <Box>\n          <Button width=\"100%\" variant=\"primary\" onClick={handleConfirm} my=\"16px\">\n            {t('I understand')}\n          </Button>\n        </Box>\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n          <Flex alignItems=\"center\">\n            <div style={{ flex: 'none' }}>\n              <Checkbox\n                id=\"checkbox\"\n                scale=\"sm\"\n                checked={!showDisclaimer}\n                onChange={() => setShowDisclaimer(!showDisclaimer)}\n              />\n            </div>\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\n          </Flex>\n        </label>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          {/* <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" /> */}\n          <img src=\"/images/trophy/trophy.png\"  width=\"64px\" height=\"64px\"  alt=\"trophy\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  height: calc(100vh - 100px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\" id=\"predictions-risk-disclaimer\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label\n            htmlFor=\"responsibility-checkbox\"\n            style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}\n          >\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox\n                  id=\"responsibility-checkbox\"\n                  scale=\"sm\"\n                  checked={acknowledgeRisk}\n                  onChange={handleSetAcknowledgeRisk}\n                />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"beta-checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"beta-checkbox\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button\n          id=\"prediction-disclaimer-continue\"\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!acknowledgeRisk || !acknowledgeBeta}\n        >\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import TradingViewChart from 'components/TradingView'\nimport React from 'react'\n\nconst TRADING_VIEW_COMPONENT_ID = 'tradingview_b239c'\n\nconst TradingView = () => {\n  return <TradingViewChart id={TRADING_VIEW_COMPONENT_ID} symbol=\"BINANCE:BNBUSDT\" />\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport {CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\nconst Card = styled.div`\n  z-index: 9;\n  background: rgb(86,48,126);\n  border-radius: 24px;\n  color: #F4EEFF;\n  overflow: hidden;\n  position: relative;\n  padding: 1px 1px 3px 1px;\n `\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n  z-index:9;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -98px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import { Bet, BetPosition } from 'state/types'\nimport { formatNumber } from 'utils/formatBalance'\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  \n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier * rewardRate\n}\n\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const payout = getPayout(bet, rewardRate)\n  return payout \n}\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  ModalCloseButton,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { fetchNodeHistory, markAsCollected, markAsCollectedSln } from 'state/predictions'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useGetHistory, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { formatNumber } from 'utils/formatBalance'\nimport { logError } from 'utils/sentry'\nimport { getPayout } from './History/helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  onSuccess?: () => Promise<void>\n  isClaimSLN?: boolean\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -113px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n  img{\n    width:66%\n  }\n`\n\nconst ModalHeader=styled.div\n`align-items: center;\nbackground: transparent;\nborder-bottom: 1px solid #383241;\ndisplay: -webkit-box;\ndisplay: -webkit-flex;\ndisplay: -ms-flexbox;\ndisplay: flex;\npadding: 12px 24px;\nz-index:6;`\n\ninterface ClaimableRounds {\n  epochs: number[]\n  total: number\n}\n\nconst calculateClaimableRounds = (history, isClaimSLN): ClaimableRounds => {\n  if (!history) {\n    return { epochs: [], total: 0 }\n  }\n\n  return history.reduce(\n    (accum: ClaimableRounds, bet: Bet) => {\n        if (!bet.claimed && !bet.claimedSln && (!isClaimSLN ? bet.position === bet.round.position : bet.position !== bet.round.position) && !bet.round.expired) {\n          const betPayout = !isClaimSLN ? getPayout(bet, REWARD_RATE) : (((bet.amount)/100) * bet.round.closePrice) / 0.0013\n\n          return {\n            ...accum,\n            epochs: [...accum.epochs, bet.round.epoch],\n            total: accum.total + betPayout,\n          }\n        }\n      return accum\n    },\n    { epochs: [], total: 0 },\n  )\n}\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({ onDismiss, onSuccess, isClaimSLN }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const dispatch = useAppDispatch()\n  const isLoadingHistory = useGetIsFetchingHistory()\n  const history = useGetHistory()\n\n  const { epochs, total } = calculateClaimableRounds(history, isClaimSLN)\n  const totalBnb = multiplyPriceByAmount(bnbBusdPrice, total)\n\n  useEffect(() => {\n    // Fetch history if they have not opened the history pane yet\n    if (history.length === 0) {\n      dispatch(fetchNodeHistory({ account }))\n    }\n  }, [account, history, dispatch])\n\n  const handleClick = async () => {\n    try {\n      const tx = await callWithGasPrice(predictionsContract, (!isClaimSLN ? 'claim' : 'claimSLN'), [epochs])\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      // Immediately mark rounds as claimed\n      if(!isClaimSLN){\n        dispatch(\n          markAsCollected(\n            epochs.reduce((accum, epoch) => {\n              return { ...accum, [epoch]: false }\n            }, {}),\n          ),\n        )\n      }\n      else{\n        dispatch(\n          markAsCollectedSln(\n            epochs.reduce((accum, epoch) => {\n              return { ...accum, [epoch]: false }\n            }, {}),\n          ),\n        )\n      }\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your prizes have been sent to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n    } catch (error) {\n      console.error('Unable to claim winnings', error)\n      logError(error)\n      toastError(\n        t('Error'),\n        (error as any)?.data?.message ||\n          t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny-winner.png\" alt=\"bunny decoration\" height=\"116px\" width=\"135px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <img src=\"/images/trophy/trophy.png\"  width=\"96px\" height=\"96px\" style={{margin: '0 auto 25px'}} alt=\"trophy\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatNumber(total, 0, 4)} ${isClaimSLN ? 'SLN' : 'BNB'}`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {/* {`~$${totalBnb.toFixed(2)}`} */}\n              {!isClaimSLN ? `~$${totalBnb.toFixed(2)}` : `~$${(total * 0.0013).toFixed(4)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"center\" mb=\"24px\">\n          {isLoadingHistory ? (\n            <Skeleton height=\"21\" width=\"140px\" />\n          ) : (\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {epochs.length === 1\n                ? t('From round %round%', { round: epochs[0] })\n                : t('From rounds %rounds%', { rounds: epochs.join(', ') })}\n            </Text>\n          )}\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx || isLoadingHistory}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  isClaimSLN?: boolean\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({ hasClaimed, onSuccess, children, isClaimSLN, ...props }) => {\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal onSuccess={onSuccess} isClaimSLN={isClaimSLN} />, false)\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  hasExpired?: boolean\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, hasExpired, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const predictionsContract = usePredictionsContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = async () => {\n\n\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\n    setIsPendingTx(true)\n\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      if (onSuccess) {\n        await onSuccess()\n      }\n      setIsPendingTx(false)\n      toastSuccess(t('Position reclaimed!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n    } else {\n      setIsPendingTx(false)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      disabled={hasExpired}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import { BigNumber, ethers } from 'ethers'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nconst MIN_PRICE_USD_DISPLAYED = BigNumber.from(100000)\nconst MIN_PRICE_BNB_DISPLAYED = BigNumber.from('1000000000000000')\nconst DISPLAYED_DECIMALS = 3\n\ntype formatPriceDifferenceProps = {\n  price?: BigNumber\n  minPriceDisplayed: BigNumber\n  unitPrefix: string\n  decimals: number\n}\n\nconst formatPriceDifference = ({\n  price = BigNumber.from(0),\n  minPriceDisplayed,\n  unitPrefix,\n  decimals,\n}: formatPriceDifferenceProps) => {\n  const signedPriceToFormat = minPriceDisplayed.mul(price)\n  return `${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`\n  \n}\nconst formatPriceDifference1 = ({\n  price = BigNumber.from(0),\n  minPriceDisplayed,\n  unitPrefix,\n  decimals,\n}: formatPriceDifferenceProps) => {\n  const sign = price.isNegative() ? BigNumber.from(-1) : BigNumber.from(1)\n\n  if (price.abs().lt(minPriceDisplayed)) {\n    const signedPriceToFormat = minPriceDisplayed.mul(sign)\n\n    return `${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`\n  }\n\n  return `${unitPrefix}${formatBigNumberToFixed(price, DISPLAYED_DECIMALS, decimals)}`\n}\n\nexport const formatUsdv2 = (usd: BigNumber) => {\n  return formatPriceDifference({ price: usd, minPriceDisplayed: MIN_PRICE_USD_DISPLAYED, unitPrefix: '$', decimals: 8 })\n}\n\nexport const formatBnbv2 = (bnb: BigNumber) => {\n  return formatPriceDifference1({ price: bnb, minPriceDisplayed: MIN_PRICE_BNB_DISPLAYED, unitPrefix: '', decimals: 18 })\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\n  const now = Date.now()\n\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\n    return true\n  }\n\n  return false\n}\n\nexport const getMultiplierV2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n  // console.log(price + '===' + lockPrice + \"====>\"+ price.sub(lockPrice))\n  return price.sub(lockPrice)\n}\n\nexport const getRoundPosition = (lockPrice: ethers.BigNumber, closePrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.TIE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n\nexport const CHART_DOT_CLICK_EVENT = 'CHART_DOT_CLICK_EVENT'","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport {\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Flex,\n  FlexProps,\n  Text,\n  useTooltip,\n  TooltipText,\n  InfoIcon,\n} from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"2px\"\n      px=\"4px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\" fontSize='12px' >\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const { t } = useTranslation()\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Neither side wins this round')}\n      </Text>\n      <Text>\n        {t(\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly SLCT burn.',\n        )}\n      </Text>\n    </>,\n    { placement: 'right' },\n  )\n\n  if (betPosition === BetPosition.TIE) {\n    return (\n      <>\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} color=\"secondary\" fontWeight=\"300\" textTransform=\"uppercase\">\n          <Flex alignItems=\"center\">\n            {t('To Burn')}\n            <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\n          </Flex>\n        </TooltipText>\n      </>\n    )\n  }\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { ethers } from 'ethers'\nimport { Box, Flex, FlexProps, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, NodeRound, Round } from 'state/types'\nimport { formatUsdv2, formatBnbv2, getRoundPosition, getPriceDifference } from '../../helpers'\nimport { formatBnb, formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: NodeRound['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnbv2(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"12px\" bold>{t('Prize Pool')}:</Text>\n      <Text fontSize=\"12px\" bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: NodeRound['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"12px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"12px\">{formatUsdv2(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  switch (betPosition) {\n    case BetPosition.BULL:\n      return theme.colors.success\n    case BetPosition.BEAR:\n      return theme.colors.failure\n    case BetPosition.TIE:\n      return theme.colors.textDisabled\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: #492682;\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n\ninterface RoundPriceProps {\n  lockPrice: ethers.BigNumber\n  closePrice: ethers.BigNumber\n}\n\nexport const RoundPrice: React.FC<RoundPriceProps> = ({ lockPrice, closePrice }) => {\n  const betPosition = getRoundPosition(lockPrice, closePrice)\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\n\n  const getTextColor = () => {\n    switch (betPosition) {\n      case BetPosition.BULL:\n        return 'success'\n      case BetPosition.BEAR:\n        return 'failure'\n      case BetPosition.TIE:\n      default:\n        return 'textDisabled'\n    }\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n      {closePrice ? (\n        <Text color={getTextColor()} bold fontSize=\"16px\">\n          {formatUsdv2(closePrice)}\n        </Text>\n      ) : (\n        <Skeleton height=\"34px\" my=\"1px\" />\n      )}\n      <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\n    </Flex>\n  )\n}\n\n/**\n * TODO: Remove\n *\n * This is a temporary function until we consolidate the data coming from the graph versus the node\n */\ninterface PrizePoolHistoryRowProps extends FlexProps {\n  totalAmount: number\n}\n\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\ninterface LockPriceHistoryRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n/**\n * END TEMPORARY COMPONENTS\n */\n","import React from 'react'\nimport { BoxProps, Text } from '@pancakeswap/uikit'\nimport { NodeRound } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundPosition } from '../../helpers'\nimport { LockPriceRow, PrizePoolRow, RoundPrice, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: NodeRound\n  hasFailed?: boolean\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = getRoundPosition(lockPrice, closePrice)\n  const { t } = useTranslation()\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {hasFailed ? (\n        <Text bold color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <RoundPrice lockPrice={lockPrice} closePrice={closePrice} />\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../History/helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getPredictionsContract } from 'utils/contractHelpers'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const predictionsContract = getPredictionsContract()\n      const refundable = await predictionsContract.refundable(epoch, account)\n\n      if (refundable) {\n        // Double check they have not already claimed\n        const ledger = await predictionsContract.ledger(epoch, account)\n        setIsRefundable(ledger.claimed === false)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { useGetIsClaimable } from 'state/predictions/hooks'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { getBscScanLink } from 'utils'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst Divider = styled.hr`\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const canClaim = useGetIsClaimable(bet.round.epoch)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\n    { placement: 'auto' },\n  )\n\n  const isWinner = result === Result.WIN\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\n  const totalPayout = multiplyPriceByAmount(bnbBusdPrice, payout)\n  const returned = payout + bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      case Result.TIE:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      case Result.TIE:\n        return t('To Burn')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      case Result.TIE:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton hasClaimed={!canClaim} width=\"100%\" mb=\"16px\" onSuccess={handleSuccess}>\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && bet.claimedHash && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}:</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${totalPayout.toFixed(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        {isWinner && (\n          <>\n            <Divider />\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\n              <Text fontSize=\"14px\" color=\"textSubtle\">\n                {t('Amount to collect')}:\n              </Text>\n              <Flex justifyContent=\"end\">\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\n                <span ref={targetRef}>\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\n                </span>\n              </Flex>\n              {tooltipVisible && tooltip}\n            </Flex>\n          </>\n        )}\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\nimport BetResult from './BetResult'\nimport { getMultiplier } from './helpers'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResultHistory round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResultHistory>\n      {bet.round.lockBlock && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Opening Block')}</Text>\n          <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\n            {bet.round.lockBlock}\n          </Link>\n        </Flex>\n      )}\n      {bet.round.closeBlock && (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Text>{t('Closing Block')}</Text>\n          <Link href={getBscScanLink(bet.round.closeBlock, 'block')} external>\n            {bet.round.closeBlock}\n          </Link>\n        </Flex>\n      )}\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState, useEffect } from 'react'\nimport {\n  BinanceIcon,\n  Box,\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  InfoIcon,\n  PlayCircleOutlineIcon,\n  Text,\n  useTooltip,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { useGetCurrentEpoch, useGetIsClaimable, useGetIsClaimableSLN, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchLedgerData, fetchNodeHistory, markAsCollected, markAsCollectedSln } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n  flex-direction: column;\n  align-items: end;\n`\nconst StyledBetWrap = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n  width:100%\n`\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Neither side wins this round')}\n      </Text>\n      <Text>\n        {t(\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly SLCT burn.',\n        )}\n      </Text>\n    </>,\n    { placement: 'right' },\n  )\n\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const canClaim = useGetIsClaimable(bet.round.epoch);\n  const canClaimSln = useGetIsClaimableSLN(bet.round.epoch);\n  const isExpired  = bet.round.expired\n  const isRefundable  = bet.round.isRefundable\n\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'warning'\n      case Result.TIE:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.CANCELED) {\n      return (<>&asymp;</>)\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch && !bet.round.failed\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1 && !round.failed\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? (\n            <>\n              {/* t('Canceled') */}\n             {resultTextPrefix}{formatBnb(payout)}\n             </>\n          ) : roundResult === Result.TIE ? (\n            <>\n              {tooltipVisible && tooltip}\n              <Flex alignItems=\"center\" ref={targetRef}>\n                {t('To Burn')}\n                <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\n              </Flex>\n            </>\n          ) : (\n            `${resultTextPrefix}${formatBnb(payout)}`\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    // dispatch(markAsCollected({ [bet.round.epoch]: true }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n    dispatch(fetchNodeHistory({account}))\n  }\n\n  return (\n    <>\n      <StyledBet>\n        <StyledBetWrap onClick={toggleOpen} role=\"button\">\n          <Box width=\"48px\">\n            <Text textAlign=\"center\">\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                {t('Round')}\n              </Text>\n              <Text bold lineHeight={1}>\n                {round.epoch.toLocaleString()}\n              </Text>\n            </Text>\n          </Box>\n          <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n          {bet.claimed && (\n            <BinanceIcon/>\n          )}\n          {roundResult === Result.WIN  && !bet.claimed && (\n            <Flex flexDirection='column' alignItems='flex-end' mr=\"8px\">\n              <CollectWinningsButton hasClaimed={!canClaim} isClaimSLN={false} onSuccess={handleSuccess} scale=\"sm\">\n                {t('Collect')}\n              </CollectWinningsButton>\n            </Flex>\n          )}\n          {bet.claimedSln && (\n            <img src='/images/tokens/sln.png' style={{marginLeft:'4px', width:'20px', height:'20px'}} alt=\"sln\"/>\n          )}\n          {roundResult === Result.LOSE  && !bet.claimedSln && (\n            <Flex flexDirection='column' alignItems='flex-end' mr=\"8px\">\n              <CollectWinningsButton hasClaimed={!canClaimSln} isClaimSLN onSuccess={handleSuccess} scale=\"sm\">\n                {t('Collect')}\n              </CollectWinningsButton>\n            </Flex>\n          )}\n          {(roundResult === Result.CANCELED ) && !bet.claimed && (\n            <ReclaimPositionButton epoch={bet.round.epoch} hasExpired = {!isRefundable} onSuccess={handleSuccess} scale=\"sm\" mr=\"8px\">\n              {t('Refund')} \n            </ReclaimPositionButton>\n          )}\n          {(!isOpenRound && !isLiveRound) && (\n            <IconButton variant=\"text\" scale=\"sm\">\n              {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n            </IconButton>\n          )}\n        </StyledBetWrap>\n        {(\n          roundResult === (Result.WIN) || \n          roundResult === (Result.LOSE) || \n          roundResult === (Result.CANCELED)) && \n          isExpired && \n          (!bet.claimed && !bet.claimedSln ) && \n          <Text mt='5px' fontSize='12px' pt='5px' pr='20px'>{t('Max time peroid for claimable funds has expired')}</Text>}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import request, { gql } from 'graphql-request'\nimport flatten from 'lodash/flatten'\nimport { GRAPH_API_PREDICTION_V1 } from 'config/constants/endpoints'\n\nexport const getV1History = async (skip = 0, where = {}): Promise<Record<string, any>[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION_V1,\n    gql`\n      query getV1BetHistory($skip: Int!, $where: Bet_filter) {\n        bets(first: 1000, skip: $skip, where: $where, orderBy: createdAt, orderDirection: desc) {\n          hash\n          amount\n          position\n          claimed\n          claimedHash\n          round {\n            epoch\n            position\n            failed\n            totalAmount\n            lockPrice\n            closePrice\n            totalBets\n            totalAmount\n          }\n        }\n      }\n    `,\n    { skip, where },\n  )\n  return response.bets\n}\n\nexport const getAllV1History = (where = {}): Promise<Record<string, any>[]> => {\n  return new Promise((resolve, reject) => {\n    const bets = {}\n\n    const getHistoryChunk = async (skip: number) => {\n      try {\n        const betHistory = await getV1History(skip, where)\n        bets[skip] = betHistory\n\n        if (betHistory.length === 0) {\n          resolve(flatten(Object.values(bets)))\n        } else {\n          getHistoryChunk(skip + 1000)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    getHistoryChunk(0)\n  })\n}\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  InjectedModalProps,\n  Text,\n  Heading,\n  ModalCloseButton,\n  Button,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAllV1History } from './helpers'\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\nconst ModalHeader=styled.div\n`align-items: center;\nbackground: transparent;\nborder-bottom: 1px solid #383241;\ndisplay: -webkit-box;\ndisplay: -webkit-flex;\ndisplay: -ms-flexbox;\ndisplay: flex;\npadding: 12px 24px;\nz-index:5;`\n\n\nconst CollectRoundWinningsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [history, setHistory] = useState([])\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    const header = [\n      'Round',\n      'Result',\n      'Your Position',\n      'Bet Amount',\n      'Transaction',\n      'Claimed Transaction',\n      'Lock Price',\n      'Close Price',\n      'Total Bets',\n      'Total Amount',\n      'Round Failed',\n    ].join(',')\n\n    const rows = history.reduce((accum, bet) => {\n      return [\n        ...accum,\n        [\n          bet.round.epoch,\n          bet.round.position,\n          bet.position,\n          bet.amount,\n          bet.hash,\n          bet.claimedHash || '',\n          bet.round.lockPrice,\n          bet.round.closePrice,\n          bet.round.totalBets,\n          bet.round.totalAmount,\n          bet.round.failed,\n        ].join(','),\n      ]\n    }, [])\n\n    const anchor = document.createElement('a')\n    const blob = new Blob([`${header}\\n${rows.join('\\n')}`], {\n      type: 'text/csv;charset=utf-8;',\n    })\n\n    anchor.href = URL.createObjectURL(blob)\n    anchor.target = '_blank'\n    anchor.download = 'silverline-prediction-history.csv'\n\n    document.body.appendChild(anchor)\n    anchor.click()\n    document.body.removeChild(anchor)\n  }\n\n  useEffect(() => {\n    const fetchAllHistory = async () => {\n      setIsFetching(true)\n\n      try {\n        const response = await getAllV1History({ user: account.toLowerCase() })\n        setHistory(response)\n      } catch (error) {\n        console.error('Unable to fetch history', error)\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (account) {\n      fetchAllHistory()\n    }\n  }, [account, setHistory, setIsFetching])\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"116px\" width=\"135px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Nothing to Collect')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <Text as=\"p\" fontSize=\"14px\">\n          {t('You have no unclaimed prizes.')}\n        </Text>\n        <Text as=\"p\" fontSize=\"14px\" mb=\"24px\">\n          {t('Download your Prediction history below.')}\n        </Text>\n        <Button\n          onClick={handleClick}\n          isLoading={isFetching}\n          endIcon={isFetching ? <AutoRenewIcon spin width=\"24px\" color=\"white\" /> : null}\n        >\n          {t('Download .CSV')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Box, Flex, Text, ChevronRightIcon, useModal } from '@pancakeswap/uikit'\nimport Loading from 'components/Loading'\nimport CollectRoundWinningsModal from '../CollectRoundWinningsModal'\nimport { getAllV1History } from './helpers'\nimport NothingToClaimModal from './NothingToClaimModal'\n\nconst StyledClaimCheck = styled(Flex)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n  justify-content: space-between;\n  padding: 16px;\n`\n\nconst ClaimCheck = () => {\n  const [isFetching, setIsFetching] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal />, false)\n\n  const [onPresentNothingToClaimModal] = useModal(<NothingToClaimModal />)\n\n  const handleClick = async () => {\n    try {\n      setIsFetching(true)\n      const betHistory = await getAllV1History({ user: account.toLowerCase(), claimed: false })\n\n      // Filter out bets that can be claimed\n      const unclaimedBets = betHistory.filter((bet) => {\n        return bet.round.position === bet.position || bet.round.failed === true\n      })\n\n      if (unclaimedBets.length > 0) {\n        onPresentCollectWinningsModal()\n      } else {\n        onPresentNothingToClaimModal()\n      }\n    } catch (error) {\n      console.error('Unable to check v1 history', error)\n    } finally {\n      setIsFetching(false)\n    }\n  }\n\n  return (\n    <StyledClaimCheck onClick={account ? handleClick : undefined}>\n      <Box style={{ flex: 1 }}>\n        <Text>{t('Showing history for Sparc')}</Text>\n        <Flex alignItems=\"center\">\n          <Text color=\"primary\">{t('Check for unclaimed winnings')}</Text>\n          <ChevronRightIcon color=\"primary\" width=\"24px\" />\n        </Flex>\n      </Box>\n      {isFetching && (\n        <Box px=\"16px\">\n          <Loading />\n        </Box>\n      )}\n    </StyledClaimCheck>\n  )\n}\n\nexport default ClaimCheck\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { orderBy } from 'lodash'\nimport { Box, Button, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { Bet } from 'state/types'\nimport { fetchNodeHistory } from 'state/predictions'\nimport { useGetCurrentHistoryPage, useGetHasHistoryLoaded, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport HistoricalBet from './HistoricalBet'\nimport V1ClaimCheck from '../v1/V1ClaimCheck'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const hasHistoryLoaded = useGetHasHistoryLoaded()\n  const currentHistoryPage = useGetCurrentHistoryPage()\n  const isFetchingHistory = useGetIsFetchingHistory()\n\n  const handleClick = () => {\n    dispatch(fetchNodeHistory({ account, page: currentHistoryPage + 1 }))\n  }\n\n  return hasBetHistory ? (\n    <>\n      <V1ClaimCheck />\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.round.epoch} bet={bet} />\n      ))}\n      {hasBetHistory && !hasHistoryLoaded && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"24px\">\n          <Button variant=\"secondary\" scale=\"sm\" onClick={handleClick} disabled={isFetchingHistory}>\n            {t('View More')}\n          </Button>\n        </Flex>\n      )}\n    </>\n  ) : (\n    <>\n      <V1ClaimCheck />\n      <Box p=\"24px\">\n        <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n          {t('No prediction history available')}\n        </Heading>\n        <Text as=\"p\" textAlign=\"center\">\n          {t(\n            'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n          )}\n        </Text>\n      </Box>\n    </>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport { Price } from '@pancakeswap/sdk'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../helpers'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: Price\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n  const amountInUsd = multiplyPriceByAmount(bnbBusdPrice, displayAmount)\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${amountInUsd.toFixed(2)}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { getBscScanLink } from 'utils'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet, REWARD_RATE)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.epoch.toString(), payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE || roundResult === Result.TIE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  const netResultInUsd = multiplyPriceByAmount(bnbBusdPrice, netResultAmount)\n  const avgBnbWonInUsd = multiplyPriceByAmount(bnbBusdPrice, avgBnbWonPerRound)\n  const betRoundInUsd = multiplyPriceByAmount(bnbBusdPrice, summary.won.bestRound.payout)\n  const avgPositionEnteredInUsd = multiplyPriceByAmount(bnbBusdPrice, avgPositionEntered)\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${netResultInUsd.toFixed(2)}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${avgBnbWonInUsd.toFixed(2)}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${betRoundInUsd.toFixed(2)}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${avgPositionEnteredInUsd.toFixed(2)}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchNodeHistory } from 'state/predictions'\nimport { getFilteredBets } from 'state/predictions/helpers'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetCurrentHistoryPage,\n  useGetHistory,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/predictions/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const currentHistoryPage = useGetCurrentHistoryPage()\n  const { t } = useTranslation()\n  const bets = useGetHistory()\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchNodeHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  const results = getFilteredBets(bets, historyFilter, currentEpoch)\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <ConnectWalletButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory && currentHistoryPage === 1 ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    isActive?\n    <img src='/images/predictions/up-pink.png' alt=\"bear-arrow\" style={{transform:'scaleY(-1)'}} />\n    :\n    <img src='/images/predictions/up-gray.png' alt=\"bear-arrow\" style={{transform:'scaleY(-1)'}} />\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    isActive? <img src=\"/images/predictions/up-green.png\" alt=\"bull-arrow\" /> : <img src=\"/images/predictions/up-gray.png\" alt=\"bull-arrow\" />\n  )\n}\n","import React from 'react'\nimport { ethers } from 'ethers'\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnbv2 } from '../../helpers'\n\ninterface EnteredTagProps {\n  isUpTag?: boolean\n  amount?: ethers.BigNumber\n  hasClaimed?: boolean\n}\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false, isUpTag = false }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <Tag\n          variant={isUpTag ? 'success' : 'failure'}\n          fontWeight=\"bold\"\n          textTransform=\"uppercase\"\n          outline={!hasClaimed}\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\n        >\n          {hasClaimed ? t('Claimed') : t('Entered')}\n        </Tag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag","import React from 'react'\nimport { ethers } from 'ethers'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: ethers.BigNumber\n  multiplier?: string\n  hasEntered?: boolean\n  hasClaimed?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n  isHouse?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 77px;\n  margin: 0 auto;\n  width: 170px;\n\n  img {\n    filter: drop-shadow(0px 3px 3px rgba(0,0,0,0.3));\n  }\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean, isHouse: boolean) => {\n    if (isDisabled || isHouse) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  hasClaimed = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n  isHouse = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled, isHouse)\n  const downColor = getTextColor('failure')(isActive, isDisabled, isHouse)\n  const textColor = isActive? '#fff': '#03103e'\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"10px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\n        </Text>\n        <Text fontSize=\"10px\" color={textColor} bold lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n    \n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag isUpTag={position.top === 0 ? true : null} amount={betAmount} hasClaimed={hasClaimed} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content style={{paddingTop:20}} >\n            {!isDisabled && multiplierText}\n            <Text fontWeight={900} fontSize=\"12px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content style={{paddingBottom:14}} >\n          <Text fontWeight={900} fontSize=\"18px\" lineHeight=\"16px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  icon?: ReactElement\n}\n\nconst HEADER_HEIGHT = '50px'\n\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\n// that header is overlapping the 1px card border.\n// 'live' is not included into the switch case because it has isActive border style\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\n  switch (status) {\n    case 'calculating':\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\n    case 'canceled':\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'next':\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return '#ffeb3b'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return '#963fff'\n    case 'expired':\n    case 'soon':\n    default:\n      return '#aeaeae'\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'primary' | 'textSubtle' | '#963fff'\ntype FallbackColor = 'text' | 'primary' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'secondary'\n    case 'next':\n      return 'white'\n    case 'live':\n      return '#963fff'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  display: flex;\n  justify-content: space-between;\n  height: ${HEADER_HEIGHT};\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold textTransform={(isLive || status === 'next') ? 'uppercase' : 'capitalize'} fontSize=\"12px\" lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '12px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useGetIsClaimable } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  epoch: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({ epoch, isBottom = false, ...props }) => {\n  const { t } = useTranslation()\n  const isClaimable = useGetIsClaimable(epoch)\n\n  if (!isClaimable) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <img src=\"/images/trophy/trophy.png\"  width=\"64px\" height=\"64px\"  alt=\"trophy\" />\n      <CollectWinningsButton hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: NodeRound\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch } = round\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"18px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n      />\n      <CardBody p=\"4px 16px\" style={{background:'#fff'}} >\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.silverlineswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: NodeRound\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\nimport { useGetBufferSeconds } from 'state/predictions/hooks'\nimport useTheme from 'hooks/useTheme'\nimport { getHasRoundFailed, getRoundPosition } from '../../helpers'\nimport { RoundResult } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface ExpiredRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  hasClaimedUp: boolean\n  hasClaimedDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  hasClaimedUp,\n  hasClaimedDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { epoch, lockPrice, closePrice } = round\n  const betPosition = getRoundPosition(lockPrice, closePrice)\n  const bufferSeconds = useGetBufferSeconds()\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (!closePrice) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <Card borderBackground={getBorderBackground(theme, 'expired')}>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"18px\" color=\"secondary\" />}\n          title={t('Expired')}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"4px 16px\" style={{ position: 'relative', background: '#fff' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n            hasClaimed={hasClaimedUp}\n            isHouse={betPosition === BetPosition.TIE}\n          />\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            hasClaimed={hasClaimedDown}\n            isHouse={betPosition === BetPosition.TIE}\n          />\n        </CardBody>\n      </Card>\n      <CollectWinningsOverlay epoch={epoch} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport styled from \"styled-components\";\n\ninterface RoundProgressProps extends ProgressProps {\n  lockTimestamp: number\n  closeTimestamp: number\n}\n\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\n  const startMs = lockTimestamp * 1000\n  const endMs = closeTimestamp * 1000\n  const now = Date.now()\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  const BarWrap = styled.div`\n    position: relative;\n    background-color : #eeeaf4;\n    width: 100%;\n    height:6px;\n  `\n  \n  const Bar = styled.div`\n  position: absolute;\n  height: 5px;\n  top: 0px;\n  left: 0;\n  background-color: #be0067;\n  transition: width 200ms ease;\n`;\n\n  return (\n  <BarWrap>\n    <Bar style={{width:`${progress}%`}}/>\n  </BarWrap>)\n}\n\nexport default RoundProgress\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport {\n  Card,\n  CardBody,\n  Flex,\n  PlayCircleOutlineIcon,\n  Skeleton,\n  Text,\n  TooltipText,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\nimport RoundProgress from 'components/RoundProgress'\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\n  const price = useGetLastOraclePrice()\n  const bufferSeconds = useGetBufferSeconds()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n\n  const priceDifference = getPriceDifference(price, lockPrice);\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 3))\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  const now = Date.now()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from chain-link oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (now > closeTimestamp * 1000) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Card isActive>\n      <CardHeader\n        status=\"live\"\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"18px\" color=\"#963fff\" />}\n        title={t('Live')}\n        epoch={round.epoch}\n      />\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\n      <CardBody p=\"4px 16px\" style={{background:'#fff'}}>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bullMultiplier}\n          hasEntered={hasEnteredUp}\n          isActive={isBull}\n        />\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n            {t('Last Price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n            <div ref={targetRef}>\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n              </TooltipText>\n            </div>\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n              {formatUsdv2(priceDifference)}<br/>\n            </PositionTag>\n          </Flex>\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n          <PrizePoolRow totalAmount={totalAmount} />\n        </RoundResultBox>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n          isActive={!isBull}\n        />\n      </CardBody>\n      {tooltipVisible && tooltip}\n    </Card>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { BigNumber, ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { logError } from 'utils/sentry'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  epoch: number\n  onBack: () => void\n  onSuccess: (hash: string) => Promise<void>\n}\n\nconst dust = parseUnits('0.001', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  bnbBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n\n  const maxBalance = useMemo(() => {\n    return bnbBalance.gt(dust) ? bnbBalance.sub(dust) : BigNumber.from(0)\n  }, [bnbBalance]);\n\n  const balanceDisplay = formatBigNumber(bnbBalance)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(receipt.transactionHash)\n    } catch (e) {\n      logError(e)\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          style={{backgroundColor:\"white\"}}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending, style:{color:'black',backgroundColor:\"transparent\"}  }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\n          step={0.01}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1,backgroundColor:\"white\",color:\"black\" }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n            style={{color:\"black\",backgroundColor:\"white\"}}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n              style={{backgroundColor:\"#be0067\",color:\"white\"}}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <ConnectWalletButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  PlayCircleOutlineIcon,\n  Button,\n  useTooltip,\n  ArrowUpIcon,\n  ArrowDownIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { fetchLedgerData } from 'state/predictions'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getHasEnteredPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (hash: string) => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      <ToastDescriptionWithTx txHash={hash}>\n        {t('%position% position entered', {\n          position: positionDisplay,\n        })}\n      </ToastDescriptionWithTx>,\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card borderBackground=\"#fff\">\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"18px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"4px 16px\" style={{background:'#fff'}}>\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n        epoch={round.epoch}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useCallback, useEffect, useState } from 'react'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\n\nconst getNow = () => Math.floor(Date.now() / 1000)\n\n/**\n * Consider this moving up to the global level\n */\nconst useCountdown = (timestamp: number) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow()\n  })\n  const [isPaused, setIsPaused] = useState(false)\n  const isWindowVisible = useIsWindowVisible()\n\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\n\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow())\n  }, [timestamp, setSecondsRemaining])\n\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow())\n      unpause()\n    } else {\n      pause()\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\n\n  return { secondsRemaining, pause, unpause }\n}\n\nexport default useCountdown\n","import React from 'react'\nimport { Card, CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, BetPosition } from 'state/types'\nimport useTheme from 'hooks/useTheme'\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatRoundTime } from '../../helpers'\nimport useCountdown from '../../hooks/useCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: NodeRound\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const intervalSeconds = useGetIntervalSeconds()\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"18px\" />} title={t('Later')} epoch={round.epoch} />\n      <CardBody p=\"4px 16px\" style={{background:'#fff'}}>\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"20px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { getMultiplierV2 } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: NodeRound\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const ledger = useGetBetByEpoch(account, epoch)\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\n\n  const bullMultiplier = getMultiplierV2(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplierV2(totalAmount, bearAmount)\n\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={ledger?.amount}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={ledger?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={formattedBullMultiplier}\n        bearMultiplier={formattedBearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      hasClaimedDown={hasClaimedDown}\n      hasClaimedUp={hasClaimedUp}\n      betAmount={ledger?.amount}\n      bullMultiplier={formattedBullMultiplier}\n      bearMultiplier={formattedBearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useCountdown from '../hooks/useCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 16px;\n    line-height: 22px;\n  }\n`\n\nconst ClosingTitle = styled(Text)`\n  font-size: 9px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 70px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n    color: #000000;\n  }\n`\n\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\n  background-color: #fff;\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 14px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: ${({ theme }) => theme.radii.card};\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n\n  & > div {\n    @media (max-width: 575px) {\n      font-size: 14px;\n    }\n  }\n`\n\nconst TimerImg = styled.img`\n  width: 68px;\n\n  @media (max-width: 575px) {\n    width: 40px;\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice();\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 3))\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title color='#000' fontWeight={900} fontSize='16px' textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price color='#000' fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\n  const countdown = formatRoundTime(secondsRemaining)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr={24} position=\"relative\">\n      <Label dir=\"right\">\n        {secondsRemaining !== 0 ? (\n          <Title bold textAlign=\"center\" color=\"background\">\n            {countdown}\n          </Title>\n        ) : (\n          <ClosingTitle bold color=\"background\">\n            {t('Closing')}\n          </ClosingTitle>\n        )}\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        {/* <PocketWatchIcon /> */}\n        <TimerImg src=\"/images/predictions/timer.png\" width=\"68\" alt=\"timer\" />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Flex)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n  border-radius: ${({ theme }) => theme.radii.default};\n  background-color: #6000cd;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"#00ffed\" width=\"24px\" />\n      </IconButton>\n      {/* <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon> */}\n      <img src=\"/images/predictions/sparc.png\" width={60} alt=\"\" style={{margin: '-10px 0 -10px'}} />\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"#00ffed\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton\n      id=\"prediction-history-button\"\n      variant=\"primary\"\n      onClick={handleClick}\n      isLoading={isFetchingHistory}\n      disabled={!account}\n      style={{backgroundColor:'#AEAEAE'}}\n    >\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"28px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Flex, HelpIcon, Button, PrizeIcon } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 2px 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 3;\n  width: 100px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    order: 1;\n    width: auto;\n  }\n`\n\nconst LeaderboardButtonWrapper = styled.div`\n  display: block;\n\n  order: 2;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    order: 3;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n    margin-left: 8px;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <Button\n              variant=\"primary\"\n              as=\"a\"\n              href=\"https://docs.silverlineswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              width=\"48px\"\n              style={{backgroundColor:'#963FFF'}}\n            >\n              <HelpIcon width=\"28px\" color=\"white\" />\n            </Button>\n          </HelpButtonWrapper>\n          <LeaderboardButtonWrapper>\n            <Button as={Link} variant=\"primary\" to=\"/sparc/leaderboard\" width=\"48px\" style={{backgroundColor:'#963FFF'}} >\n              <PrizeIcon color=\"white\" width=\"28px\" />\n            </Button>\n          </LeaderboardButtonWrapper>\n          <ButtonWrapper style={{ order: 4 }}>\n            <HistoryButton />\n          </ButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import { useEffect } from 'react'\nimport usePrevious from 'hooks/usePreviousValue'\nimport useSwiper from './useSwiper'\nimport { PageView } from '../types'\n\n/**\n * Hooks for actions to be performed when the view changes (mobile)\n */\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\n  const { swiper } = useSwiper()\n  const prevView = usePrevious(view)\n\n  useEffect(() => {\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\n      swiper.slideTo(liveSwiperIndex, 0.1)\n    }\n  }, [swiper, prevView, view, liveSwiperIndex])\n}\n\nexport default useOnViewChange\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\nimport useOnViewChange from './hooks/useOnViewChange'\nimport { PageView } from './types'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const currentEpoch = useGetCurrentEpoch()\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\n  const swiperIndex = rounds.indexOf(previousRound)\n\n  useOnNextRound()\n  useOnViewChange(swiperIndex, view)\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={swiperIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.epoch}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\nexport type formatAmountNotation = 'compact' | 'standard'\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: formatAmountNotation\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const {\n    notation = amount >= 10000 ? 'compact' : 'standard',\n    displayThreshold,\n    tokenPrecision,\n    isInteger,\n  } = options || { notation: amount >= 10000 ? 'compact' : 'standard' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n","import { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport React,{ FC } from 'react'\nimport styled from 'styled-components'\nimport { formatAmount, formatAmountNotation } from 'utils/formatInfoNumbers'\nimport { FlexGap, FlexGapProps } from './Layout/Flex'\n\nconst formatOptions = {\n  notation: 'standard' as formatAmountNotation,\n  displayThreshold: 0.001,\n  tokenPrecision: true,\n}\n\ninterface TokenDisplayProps extends FlexGapProps {\n  value?: number | string\n  inputSymbol?: string\n  outputSymbol?: string\n  format?: boolean\n}\n\nconst TextLabel = styled(Text)`\n  font-size: 32px;\n  line-height: 1.1;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst PairPriceDisplay: FC<React.PropsWithChildren<TokenDisplayProps>> = ({\n  value,\n  inputSymbol,\n  outputSymbol,\n  children,\n  format = true,\n  ...props\n}) => {\n  return value ? (\n    <FlexGap alignItems=\"baseline\" {...props}>\n      <Flex alignItems=\"inherit\">\n        <TextLabel mr=\"8px\" bold>\n          {format ? formatAmount(typeof value === 'string' ? parseFloat(value) : value, formatOptions) : value}\n        </TextLabel>\n        {inputSymbol && outputSymbol && (\n          <Text color=\"textSubtle\" fontSize=\"20px\" bold lineHeight={1.1}>\n            {`${inputSymbol}/${outputSymbol}`}\n          </Text>\n        )}\n      </Flex>\n      {children}\n    </FlexGap>\n  ) : (\n    <Skeleton height=\"36px\" width=\"128px\" {...props} />\n  )\n}\n\nexport default PairPriceDisplay\n","import React,{ useCallback, useEffect, useMemo } from 'react'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area, Dot } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\nimport { useTranslation } from 'contexts/Localization'\nimport { laggyMiddleware, loggerMiddleware, useSWRContract, useSWRMulticall } from 'hooks/useSWRContract'\nimport useSWRImmutable from 'swr/immutable'\nimport { useSWRConfig } from 'swr'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport { ChainlinkOracle } from 'config/abi/types'\nimport chainlinkOracleAbi from 'config/abi/chainlinkOracle.json'\nimport { FlexGap } from 'components/Layout/Flex'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetRoundsByCloseOracleId, useGetSortedRounds } from 'state/predictions/hooks'\nimport styled from 'styled-components'\nimport { Flex, Text, FlexProps } from '@pancakeswap/uikit'\nimport PairPriceDisplay from 'components/PairPriceDisplay'\nimport { NodeRound } from 'state/types'\nimport { getChainlinkOracleAddress } from 'utils/addressHelpers'\n\nimport useSwiper from '../hooks/useSwiper'\nimport { CHART_DOT_CLICK_EVENT } from '../helpers'\n\n\nfunction useChainlinkLatestRound() {\n  const chainlinkOracleContract = useChainlinkOracleContract()\n  // Can refactor to subscription later\n  const lastRound = useSWRContract([chainlinkOracleContract, 'latestRound'], {\n    dedupingInterval: 10 * 1000,\n    refreshInterval: 10 * 1000,\n    compare: (a, b) => {\n      // check is equal\n      if (!a || !b) return false\n      return a.eq(b)\n    },\n  })\n\n  return lastRound\n}\n\nfunction useChainlinkRoundDataSet() {\n  const lastRound = useChainlinkLatestRound()\n  const chainlinkOracleAddress  = getChainlinkOracleAddress();\n  \n  const calls = useMemo(() => {\n    return lastRound.data\n      ? Array.from({ length: 50 }).map((_, i) => ({\n          address: chainlinkOracleAddress,\n          name: 'getRoundData',\n          params: [(lastRound.data).sub(i)],\n        }))\n      : null\n  }, [lastRound.data, chainlinkOracleAddress])\n\n  const { data, error } = useSWRMulticall<Awaited<ReturnType<ChainlinkOracle['getRoundData']>>[]>(\n    chainlinkOracleAbi,\n    calls,\n    {\n      use: [laggyMiddleware],\n    },\n  )\n \n  const computedData: ChartData[] = useMemo(() => {\n    return (\n      data\n        ?.filter((d) => !!d && d.answer.gt(0))\n        .map(({ answer, roundId, startedAt }) => {\n          return {\n            answer: formatBigNumberToFixed(answer, 4, 8),\n            roundId: roundId.toString(),\n            startedAt: startedAt.toNumber(),\n          }\n        }) ?? []\n    )\n  }, [data])\n\n  return { data: computedData, error }\n}\n\ntype ChartData = {\n  answer: string\n  roundId: string\n  startedAt: number\n}\n\nconst HoverUpdater = ({ payload }) => {\n  const mutate = useChartHoverMutate()\n  useEffect(() => {\n    mutate(payload)\n  }, [mutate, payload])\n\n  return null\n}\n\nfunction useChartHover() {\n  const { data } = useSWRImmutable<ChartData>('chainlinkChartHover')\n  return data\n}\n\nfunction useChartHoverMutate() {\n  const { mutate } = useSWRConfig()\n\n  const updateHover = useCallback(\n    (data) => {\n      mutate('chainlinkChartHover', data)\n    },\n    [mutate],\n  )\n\n  return updateHover\n}\n\n\nconst chartColor = { gradient1: '#BE0067', gradient2: '#BE0067', stroke: '#BE0067' }\n\nconst ChainlinkChartWrapper = styled(Flex)<{ isMobile?: boolean }>`\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  background: rgb(178 154 222);\n`\n\nconst HoverData = ({ rounds }: { rounds: { [key: string]: NodeRound } }) => {\n  const hoverData = useChartHover()\n  const price = useGetLastOraclePrice();\n  const {\n    t,\n    currentLanguage: { locale },\n  } = useTranslation()\n  // const { token } = useConfig()\n\n  return (\n    <PairPriceDisplay\n      width=\"100%\"\n      value={hoverData ? hoverData.answer : formatBigNumberToFixed(price, 4, 3)}\n      inputSymbol=\"BNB\"\n      outputSymbol=\"USD\"\n      format={false}\n      flexWrap=\"wrap\"\n      alignItems=\"center\"\n      columnGap=\"12px\"\n    >\n      {hoverData && (\n        <FlexGap minWidth=\"51%\" alignItems=\"flex-end\" gap=\"12px\" height=\"22px\">\n          <Text color=\"textSubtle\" lineHeight={1.1}>\n            {new Date(hoverData.startedAt * 1000).toLocaleString(locale, {\n              year: 'numeric',\n              day: 'numeric',\n              month: 'short',\n              hour: '2-digit',\n              minute: '2-digit',\n            })}\n          </Text>\n          {rounds[hoverData.roundId] && (\n            <Text fontSize=\"20px\" color=\"secondary\" bold lineHeight={1.1}>\n              {t('Round')}: #{rounds[hoverData.roundId].epoch}\n            </Text>\n          )}\n        </FlexGap>\n      )}\n    </PairPriceDisplay>\n  )\n}\n\nconst ChainLinkChart = (props: FlexProps & { isMobile?: boolean }) => {\n  const { data } = useChainlinkRoundDataSet()\n  const rounds = useGetRoundsByCloseOracleId()\n\n  if (!data.length) {\n    return <LineChartLoader />\n  }\n\n  return (\n    <ChainlinkChartWrapper {...props}>\n      <FlexGap\n        flexDirection=\"row\"\n        pt=\"12px\"\n        px=\"20px\"\n        alignItems=\"center\"\n        flexWrap=\"wrap\"\n        columnGap=\"12px\"\n        height={['56px','44px']}\n      >\n        <HoverData rounds={rounds} />\n      </FlexGap>\n      <Flex height={[`calc(100% - 56px)`]}>\n        <Chart rounds={rounds} data={data} />\n      </Flex>\n    </ChainlinkChartWrapper>\n  )\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst Chart = ({\n  rounds,\n  data,\n}: {\n  rounds?: {\n    [key: string]: NodeRound\n  }\n  data: ChartData[]\n}) => {\n  const {\n    currentLanguage: { locale },\n  } = useTranslation()\n  const { isDark, theme } = useTheme()\n  const mutate = useChartHoverMutate()\n\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        margin={{\n          top: 20,\n          right: 0,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          mutate(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={chartColor.gradient1} stopOpacity={0.34} />\n            <stop offset=\"100%\" stopColor={chartColor.gradient2} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"startedAt\"\n          tickFormatter={(time) => {\n            return new Date(time * 1000).toLocaleString(locale, {\n              hour: 'numeric',\n              minute: '2-digit',\n              hourCycle: 'h24',\n            })\n          }}\n          color={theme.colors.text}\n          fontSize=\"12px\"\n          minTickGap={8}\n          reversed\n          tick={{ fill: theme.colors.text }}\n        />\n        <XAxis dataKey=\"roundId\" hide />\n        <YAxis\n          dataKey=\"answer\"\n          tickCount={6}\n          scale=\"linear\"\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          domain={['auto', 'auto']}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.textSubtle, strokeDasharray: '3 3' }}\n          contentStyle={{ display: 'none' }}\n          formatter={(_, __, props) => <HoverUpdater payload={props.payload} />}\n        />\n        <Area\n          dataKey=\"answer\"\n          type=\"linear\"\n          stroke={chartColor.stroke}\n          fill=\"url(#gradient)\"\n          strokeWidth={2}\n          activeDot={(props) => {\n            if (rounds[props.payload.roundId]) {\n              return <ActiveDot {...props} />\n            }\n            return null\n          }}\n          dot={(props) => {\n            if (rounds[props.payload.roundId]) {\n              return (\n                <Dot\n                  {...props}\n                  r={4}\n                  fill={isDark ? theme.colors.gold : theme.colors.secondary}\n                  fillOpacity={1}\n                  strokeWidth={0}\n                />\n              )\n            }\n            return null\n          }}\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nconst ActiveDot = (props) => {\n  const { swiper } = useSwiper()\n  const sortedRounds = useGetSortedRounds()\n  const { theme } = useTheme()\n\n  return (\n    <Dot\n      {...props}\n      r={12}\n      stroke={theme.colors.primary}\n      strokeWidth={10}\n      fill={theme.colors.background}\n      style={{ cursor: 'pointer' }}\n      onClick={() => {\n        const roundIndex = sortedRounds.findIndex((round) => round.closeOracleId === props.payload.roundId)\n        if (roundIndex >= 0 && swiper) {\n          swiper.slideTo(roundIndex)\n          swiper.el.dispatchEvent(new Event(CHART_DOT_CLICK_EVENT))\n        }\n      }}\n    />\n  )\n}\n\nexport default ChainLinkChart\n","export enum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split,{ SplitInstance } from 'split-grid'\nimport { Flex, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen, useChartView } from 'state/predictions/hooks'\nimport { setChartPaneState, setChartView } from 'state/predictions'\nimport { PredictionStatus, PredictionsChartView } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { TabToggle } from 'components/TabToggle'\nimport { TradingViewLabel } from 'components/TradingView'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\nimport ChainLinkChart from './components/ChainlinkChart'\n\n\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 24px .8fr'\n\nconst ExpandButtonGroup = styled(Flex)`\n  bottom: 25px;\n  left: 32px;\n  position: absolute;\n  display: none;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 24px 24px 0 0;\n  z-index: 50;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 24px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: calc(100vh - 169px);\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-position: 100% -40px;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div<{ isChartPaneOpen?: boolean }>`\n  background:  #42008E;\n  cursor: ${({ isChartPaneOpen }) => (isChartPaneOpen ? 'row-resize' : 'pointer')};\n  height: 25px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 10px;\n    width: 64px;\n  }\n`\n\nconst PageHeader = styled.div`\n  background: #2E076F;\n  color: #00ffed;\n  padding: 20px 20px;\n  font-weight: 600;\n  text-align: center;\n\n  &:after {\n    width: 160px;\n    background: #00ffed;\n    height: 3px;\n    border-radius: 3px;\n    content: '';\n    display: block;\n    margin: 0 auto;\n    margin-top: 10px;\n  }\n`;\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const chartView = useChartView()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const openChartPane = () => {\n    splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n    splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n    // Purely comedic: We only want to animate if we are clicking the open chart button\n    // If we keep the transition on the resizing becomes very choppy\n    delay(() => {\n      splitWrapperRef.current.style.transition = ''\n    }, 150)\n\n    dispatch(setChartPaneState(true))\n  }\n  const splitInstance = useRef<SplitInstance>()\n\n  useEffect(() => {\n    const { height } = chartRef.current.getBoundingClientRect()\n\n    if (height > 0 && !isChartPaneOpen) {\n      dispatch(setChartPaneState(true))\n    }\n  }, [isChartPaneOpen, dispatch])\n\n  // unmount\n  useEffect(() => {\n    return () => {\n      dispatch(setChartPaneState(false))\n    }\n  }, [dispatch])\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    if (isChartPaneOpen && !splitInstance.current) {\n      splitInstance.current = Split({\n        dragInterval: 1,\n        snapOffset: threshold,\n        onDrag: handleDrag,\n        rowGutters: [\n          {\n            track: 1,\n            element: gutterRef.current,\n          },\n        ],\n      })\n    } else if (!isChartPaneOpen && splitInstance.current) {\n      splitInstance.current?.destroy()\n      splitInstance.current = undefined\n    }\n\n    return () => {\n      splitInstance.current?.destroy()\n      splitInstance.current = undefined\n    }\n  }, [gutterRef, chartRef, dispatch, isChartPaneOpen])\n\n  return (\n    <>\n      <PageHeader>\n        <div>SPARC (BETA)</div>\n      </PageHeader>\n      \n      <StyledDesktop style={{backgroundImage:\"url('/images/predictions/bg.png')\"}} >\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </PositionPane>\n          \n          <Gutter \n           ref={gutterRef}\n           isChartPaneOpen={isChartPaneOpen}\n           onClick={() => {\n             openChartPane()\n           }}\n          >\n            <ExpandButtonGroup>\n              <TabToggle\n                height=\"42px\"\n                as={Button}\n                style={{ whiteSpace: 'nowrap', alignItems: 'center' }}\n                isActive={chartView === PredictionsChartView.TradingView}\n                onMouseDown={(e) => {\n                  e.stopPropagation()\n                  e.preventDefault()\n                  dispatch(setChartView(PredictionsChartView.TradingView))\n                }}\n              >\n                {chartView === PredictionsChartView.TradingView && <ChartIcon mr=\"10px\" />} TradingView {t('Chart')}\n              </TabToggle>\n              <TabToggle\n                as={Button}\n                height=\"42px\"\n                style={{ whiteSpace: 'nowrap', alignItems: 'center' }}\n                isActive={chartView === PredictionsChartView.Chainlink}\n                onMouseDown={(e) => {\n                  e.stopPropagation()\n                  e.preventDefault()\n                  dispatch(setChartView(PredictionsChartView.Chainlink))\n                }}\n              >\n                {chartView === PredictionsChartView.Chainlink && <ChartIcon mr=\"10px\" />} Chainlink {t('Chart')}\n              </TabToggle>\n            </ExpandButtonGroup>\n            <TradingViewLabel justifyContent=\"flex-end\" symbol=\"BNBUSDT\" />\n          </Gutter>\n          <ChartPane ref={chartRef}>\n            {isChartPaneOpen && (chartView === PredictionsChartView.TradingView ? <TradingView /> : <ChainLinkChart/>)}\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const contract = getChainlinkOracleContract()\n      const response = await contract.latestAnswer()\n      setPrice(response)\n    }\n\n    fetchPrice()\n  }, [lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 10) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.div(100000).toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice","import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status !== PredictionStatus.INITIAL) {\n      timer.current = setInterval(async () => {\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\n\n        dispatch(fetchRounds(liveCurrentAndRecent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\n\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem className=\"ButtonLeftSide\" style={{position:\"relative\",right:\"1px\"}}>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem  className=\"ButtonRightSide\" disabled={!account} style={{position:\"relative\",left:\"1px\"}}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { setChartView } from 'state/predictions'\nimport { useAppDispatch } from 'state'\nimport { useChartView } from 'state/predictions/hooks'\nimport { PredictionsChartView } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\nimport ChainLinkChart from './components/ChainlinkChart'\n\n\n\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  const chartView = useChartView()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation();\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n        <div style={{ height: 'min-content' }}>\n          <TabToggleGroup>\n            <TabToggle\n              isActive={chartView === PredictionsChartView.TradingView}\n              onClick={() => dispatch(setChartView(PredictionsChartView.TradingView))}\n            >\n              TradingView  {t('Chart')}\n            </TabToggle>\n            <TabToggle\n              isActive={chartView === PredictionsChartView.Chainlink}\n              onClick={() => dispatch(setChartView(PredictionsChartView.Chainlink))}\n            >\n              Chainlink {t('Chart')}\n            </TabToggle>\n          </TabToggleGroup>\n        </div>\n      </MenuWrapper>\n      <ChartWrapper>\n        {chartView === PredictionsChartView.TradingView ? <TradingView /> : <ChainLinkChart pt=\"8px\" isMobile />}\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport { PageView } from './types'\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { PageMeta } from 'components/Layout/Page'\nimport PageLoader from 'components/Loader/PageLoader'\nimport React, { useEffect, useRef } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useInitialBlock } from 'state/block/hooks'\nimport { initializePredictions } from 'state/predictions'\nimport { useChartView, useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\nimport { PredictionsChartView, PredictionStatus } from 'state/types'\nimport { useUserPredictionAcceptedRisk, useUserPredictionChartDisclaimerShow } from 'state/user/hooks'\nimport ChartDisclaimer from './components/ChartDisclaimer'\nimport ChainlinkChartDisclaimer from './components/ChainlinkChartDisclaimer'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport Container from './components/Container'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollPredictions from './hooks/usePollPredictions'\nimport Mobile from './Mobile'\n\nconst Predictions = () => {\n  const { isDesktop } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = useUserPredictionAcceptedRisk()\n  const [showDisclaimer] = useUserPredictionChartDisclaimerShow()\n  const { account } = useWeb3React()\n  const chartView = useChartView()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\n  const [onPresentChainlinkChartDisclaimer] = useModal(<ChainlinkChartDisclaimer />, false)\n\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n  const onPresentChainlinkChartDisclaimerRef = useRef(onPresentChainlinkChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (isChartPaneOpen && showDisclaimer && chartView === PredictionsChartView.TradingView) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen, chartView, showDisclaimer])\n\n   // Chart Disclaimer\n   useEffect(() => {\n    if (isChartPaneOpen && showDisclaimer && chartView === PredictionsChartView.Chainlink) {\n      onPresentChainlinkChartDisclaimerRef.current()\n    }\n  }, [onPresentChainlinkChartDisclaimerRef, isChartPaneOpen, chartView, showDisclaimer])\n\n  useEffect(() => {\n    if (initialBlock > 0) {\n      // Do not start initialization until the first block has been retrieved\n      dispatch(initializePredictions(account))\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollPredictions()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <PageMeta />\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n","import React from 'react'\nimport { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst Wrapper = styled(Flex)`\n  overflow-x: scroll;\n  padding: 0;\n  border-radius: 24px 24px 0 0;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none; /* Firefox */\n`\n\nconst Inner = styled(Flex)`\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.colors.input};\n  width: 100%;\n`\n\ninterface TabProps {\n  isActive?: boolean\n  onClick?: () => void\n}\n\nexport const TabToggle = styled.button<TabProps>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  flex: 1;\n  border: 0;\n  outline: 0;\n  padding: 16px;\n  margin: 0;\n  border-radius: 24px 24px 0 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : '#000')};\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\n  &:hover {\n    opacity: unset !important;\n  }\n`\n\ninterface TabToggleGroupProps {\n  children: React.ReactElement[]\n}\n\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\n  return (\n    <Wrapper p={['0 4px', '0 16px']}>\n      <Inner>{children}</Inner>\n    </Wrapper>\n  )\n}\n"],"sourceRoot":""}